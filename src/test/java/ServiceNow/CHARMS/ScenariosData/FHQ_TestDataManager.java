package ServiceNow.CHARMS.ScenariosData;

import java.util.Map;
import com.nci.automation.utils.ExcelReader;
import ServiceNow.CHARMS.Constants.CHARMS_Data_File_Path_Constants;
import ServiceNow.CHARMS.Constants.FHQConstants;
import appsCommon.PageInitializers.PageInitializer;

public class FHQ_TestDataManager extends PageInitializer {
	/* Participant */
	public Map<String, String> testDataForFHQ;
	public String  relationshipIdentity;
	public String  relationshipIdentityValue;
	public String  firstInitialOfLASTNameParticipant;
	public String  participantFirstInitialOfLASTName;
	public String  participantFirstInitialOfLASTNameValue; 
	public String  hasParticipantHadAnyMiscarriagesOrStillbirths;
	public String  pleaseWriteFirstNameOfPartnersWithWhomParticipantHadMiscarriages;
	public String  pleaseWriteFirstNameOfPartnersWithWhomParticipantHadStillbirths;
	public String  participantValue;
	public String  participationStatus;
	public String  participationStatusValue;
	public String  partnerYearOfBirthValueNV;
	public String  yearOfBirthValueNV;
	public String  nCIFamilyStudiesHubRASopathies;
	public String  weKnowFamiliesComeInDifferentShapesAndSizes;
	public String  asYouGoThroughYourRelativesInformationInTh;
	public String  submitFHQQuestionnaire;
	public String  note;
	public String  itsOkayNotToKnowInformationAboutSomeOfYourRelatives;
	public String  clickHereToStartYourFamilyHealthQuestionnaire;
	public String  fHQHome;
	public String  formView;
	public String  youAreCurrentlyFillingOutInformationForTheParticipant;
	public String  participant;
	public String  thisFormWillAskQuestionsAboutTheParticipantAndTheirChildrenAndSiblings;
	public String  ifYouAreFillingOutThisFormForYourselfYouAreReferredToAsTheParticipant;
	public String  pleaseIndicateYourRelationshipToTheParticipant;
	public String  theFollowingQuestionsAreAboutTheStudyParticipant;
	public String  firstName;
	public String  firstInitialOfLASTName;
	public String  vitalStatus;
	public String  firstNameOfTheParticipant;
	public String  participantFirstName;
	public String  firstInitialOfLASTNameOfTheParticipant;
	public String  sexAssignedAtBirth;
	public String  genderIdentity;
	public String  hasTheParticipantEverHadAnyMiscarriagesOrStillbirths;
	public String  lessThan20WeeksOfPregnancy;
	public String  totalNumberOfMiscarriages;
	public String  pleaseWriteTheFirstNameOfThePartnersWithWhomTheParticipantHadThePregnancyiesAbove;
	public String  pleaseWriteTheFirstNameOfThePartnersWithWhomTheParticipantHadThePregnancyiesAboveMiscarriages;
	public String  totalNumberOfStillbirths;
	public String  moreThan20WeeksOfPregnancy;
	public String  pleaseWriteTheFirstNameOfThePartnersWithWhomTheParticipantHadThePregnancyiesAboveStillbirths;
	public String  pleaseIncludeLivingAndDeceasedChildren;
	public String  howManyTotalChildrenAliveAndDeceasedHasTheParticipantHad;
	public String  child;
	public String  children;
	public String  add;
	public String  removeAll;
	public String  actions;
	public String  childfirstName;
	public String  childfirstInitialOfLASTName;
	public String  childvitalStatus;
	public String  noDataToDisplay;
	public String  addRow;
	public String  cancel;
	public String  partner;
	public String  partnerfirstName;
	public String  partnerfirstInitialOfLASTName;
	public String  partnervitalStatus;
	public String  howManyTotalDifferentPartnersHasTheParticipantHadBiologicalChildrenWith;
	public String  pleaseDoNotCountThemHere;
	public String  weWouldLikeToAskYouSomeQuestionsAboutSiblingsDetails;
	public String  howManySiblingsDoesTheParticipantHave;
	public String  pleaseIncludeAllFullAndHalfSiblings;
	public String  siblings;
	public String  typesOfSiblingRelation;
	public String  firstNameOfSibling;
	public String  vitalStatusOfSibling;
	public String  isThereAnythingElseYouWouldLikeUsToKnowAboutTheParticipant;
	public String  addAdditionalInformation;
	public String  complete;
	public String  youWillNotBeAbleToModifyThisRecordAfterYouComplete;
	/* PARTNER */
	public String  listView;
	public String  partners;
	public String  addNewPartners;
	public String  theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords;
	public String  yearOfBirth;
	public String  relationToPatient;
	public String  partnerFirstName;
	public String  partnerFirstInitialOfLASTName;
	public String  partnerVitalStatus;
	public String  partnerYearOfBirth;
	public String  partnerYearOfBirthValue;
	public String  partnerRelationToPatient;
	public String  youAreCurrentlyFillingOutInformationForTheParticipantPartner;
	public String  pleaseProvideWhatInformationYouCanAboutThisPartner;
	public String  basicInformation;
	public String  isThisTheParticipantCurrentPartner;
	public String  isThisTheParticipantCurrentPartnerValue;
	public String  anEstimatedDateIsPreferred;
	public String  partnerSexAssignedAtBirth;
	public String  partnerGenderIdentity;
	public String  isTheParticipantBloodRelatedToThisPerson;
	public String  ifYouAreFillingOutThisFormForYourself;
	public String  isTheParticipantBloodRelated;
	public String  pleaseDescribeHowTheParticipantIsRelatedToThisPerson;
	public String  describeTheParticipantRelatedToThisPerson;
	public String  other;
	public String  isThereAnyAdditionalInformationYouWouldLikeUsToKnowOrUnderstandAboutThisRelative;
	/* PARENTS */
	public String parents;
	public String addNewParents;
	public String relationsToPatient;
	public String relationToPatientParent;
	public String iDoNotKnowAnyInformationAboutThisBiologicalRelative;
	public String wasThisRelativeAdopted;
	public String relativeAdoptedValueSelected;
	public String isThisRelativeATwinOrPartOfAMultipleBirth;
	public String twinOrPartOfAMultipleBirthValue;
	public String parentTypeOfBirth;
	public String typeOfBirthValue;
	public String hasThisRelativeEverHadAnyMiscarriagesOrStillbirths;
	public String hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue;
	public String pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults;
	public String totalNumberOfMiscarriagesValue;
	public String totalNumberOfStillbirthsValue;	
	/* RASOPATHY */
	public String medicalHistory;	
	public String hasThisRelativeBeenDiagnosedWithARASopathy;
	public String rASopathyHistoryBanner;
	public String hasThisRelativeBeenDiagnosedWithARASopathyValue;
	public String pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad;
	public String rASopathy;
	public String specifyOtherRASopathy;
	public String pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis;
	public String yearOfDiagnosis;	
	public String ageOfDiagnosis;	
	public String additionalInformation;
	public String rASopathyOptionSelected;
	public String specifyOtherRASopathySelected;
	public String pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected;
	public String yearOfDiagnosisForRasopathySelected;
	public String ageOfDiagnosisForRasopathySelected;
	public String additionalInformationAddedForRasopathy;
	public String hasThisRelativeEverBeenDiagnosedWithCancer;
	public String hasThisRelativeEverBeenDiagnosedWithCancerValue;
	public String pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad;
	/* CANCER */
	public String cancers;
	public String cancer;
	public String specifyOtherCancer;
	/* BENIGN TUMOR */
	public String hasThisRelativeEverBeenDiagnosedWithABenignTumor;
	public String hasThisRelativeEverBeenDiagnosedWithBenignTumor;
	public String hasThisRelativeEverBeenDiagnosedWithABenignTumorValue;
	public String pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad;
	public String benignTumor;
	public String specifyOtherBenignTumor;
	public String benignTumorOptionSelected;
	public String additionalInformationAddedForBenignTumor;
	public String yearOfDiagnosisForBenignTumorSelected;
	public String ageOfDiagnosisForBenignTumorSelected;
	/* MEDICAL CONDITIONS */
	public String hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow;
	public String medicalConditionsBanner;
	public String hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue;
	public String pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad;
	public String medicalConditions;
	public String medicalCondition;
	public String specifyMedicalCondition;
	public String cancerOptionSelected;
	public String specifyOtherCancerSelected;
	public String yearOfDiagnosisForCancerSelected;
	public String ageOfDiagnosisForCancerSelected;
	public String additionalInformationAddedForCancer;
	public String medicalConditionOptionSelected;
	public String specifyOtherMedicalConditionSelected;
	public String yearOfDiagnosisForMedicalConditionSelected;
	public String ageOfDiagnosisForMedicalConditionSelected;
	public String additionalInformationAddedForMedicalCondition;
	public String howManySiblingsDoesThisRelativeHave;
	public String howManySiblingsDoesThisRelativeHaveBanner;
	public String howManySiblingsDoesThisRelativeHaveValue;
	public String typesOfSiblingRelationSelected;
	public String siblingFirstNameValue;
	public String siblingFirstInitialOfLastNameValue;
	public String siblingVitalStatusValue;
	public String siblingVitalStatus;
	public String pleaseSelectTheAddButtonBelowToAddEachSiblingThisRelativeHas;
	public String isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative;
	/* CHILD */
	public String sonsDaughters;
	public String sonDaughter;
	public String theBlueHighlightedRowsBanner;
	public String addNewSonsDaughters;
	public String all;
	public String relationToPatientSonDaughter;
	public String parentOfThisRelative;
	public String childFirstNameValue;
	public String childFirstInitialOfLASTNameValue;
	public String parentOfThisRelativeValue;
	public String childVitalStatusValue;
	public String childYearOfBirthValue;
	public String relationToPatientValue;
	public String childSexAssignedAtBirthValue;
	public String cousinBanner;
	public String pleaseMakeSureYouHaveCompletedAllPartnerRecordsBeforeCompletingChildrenRecords;
	public String youAreCurrentlyFillingOutInformationForTheParticipantsSonDaughter;
	public String childBasicInformation;
	public String childYearOfBirthSelected;
	public String childSexAssignedAtBirthSelected;
	public String childGenderIdentitySelected;
	public String whichBestDescribesThisRelative;
	public String whichBestDescribesThisRelativeSelected;
	public String areAnyOfTheFollowingIndividualsABiologicalParentOfThisChild;
	public String areAnyOfTheFollowingIndividualsABiologicalParentOfThisChildSelected;
	public String whichOfTheFollowingIndividualsIsABiologicalParentOfThisChild;
	public String whichOfTheFollowingIndividualsIsABiologicalParentOfThisChildSelected;
	public String isTheOtherBiologicalParentOfThisRelativeOneOfThePartnersYouHaveEnteredSelected;
	public String partnerNameHelpBanner;
	public String otherBiologicalParentHelpBanner;
	public String otherBiologicalParentSelected;
	public String typeOfBirth;
	public String howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHad;
	public String childBanner;
	public String pleaseSelectTheAddButtonBelowToAddEachChildThisRelativeHas;
	public String howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHadSelected;
	/* SIBLING */
	public String sibling;
	public String addNewSiblings;
	public String typeOfSibling;
	public String siblingFirstName;
	public String siblingFirstInitialOfLASTNameValue;
	public String siblingfirstInitialOfLASTName;
	public String typeOfSiblingValue;
	public String siblingBanner;
	public String siblingBasicInformation;
	public String pleaseSelectTheAddButtonBelowToAddEachChildThisRelativeHasHad;
	/* AUNT/UNCLE */
	public String auntUncles;
	public String addNewauntUncles;
	public String auntUncleFirstNameValue1;
	public String auntUncleFirstInitialOfLASTNameValue1;
	public String auntUncleVitalStatusValue1;
	public String auntUncleYearOfBirthValue1;
	public String auntUncleFirstNameValue2;
	public String auntUncleFirstInitialOfLASTNameValue2;
	public String auntUncleVitalStatusValue2;
	public String auntUncleYearOfBirthValue2;
	public String auntUncleFirstNameValue;
	public String auntUncleFirstInitialOfLASTNameValue;
	public String auntUncleVitalStatusValue;
	public String auntUncle;
	public String auntsUnclesDetails;
	public String auntUncleBanner;
	public String youAreCurrentlyFillingOutInformationForTheParticipantsAuntUncle; 
	public String auntUncleBasicInformation;
	public String auntUncleYearOfBirthSelected;
	public String auntUncleSexAssignedAtBirthSelected;
	public String auntUncleGenderIdentitySelected;
	public String siblingTo;
	public String typeOfSiblingNV;
	public String typeOfSiblingValueNV;
	/* NIECE/NEPHEW */
	public String niecesNephews;
	public String addNewNiecesNephews;
	public String relationToPatientNieceNephew;
	public String nieceNephewFirstNameValue;
	public String nieceNephewFirstInitialOfLASTNameValue;
	public String nieceNephewVitalStatusValue;
	public String nieceNephewYearOfBirthValue;
	public String nieceNephewSexAssignedAtBirthValue;
	public String nieceNephew;
	public String youAreCurrentlyFillingOutInformationForTheParticipantsNieceNephew;
	public String pleaseMakeSureYouHaveCompletedAllSiblingRecords;
	public String nieceNephewBasicInformation;
	public String neiceNephewYearOfBirthSelected;
	public String neiceNephewSexAssignedAtBirthSelected;
	public String neiceNephewGenderIdentitySelected;
	/* GrandParents */
	public String grandParents;
	public String addNewGrandParents;
	public String relationToPatientGrandParent;
	public String firstNameValue;
	public String firstInitialOfLASTNameValue;
	public String vitalStatusValue;
	public String yearOfBirthValue;
	public String firstNameValue1;
	public String firstInitialOfLASTNameValue1;
	public String vitalStatusValue1;
	public String yearOfBirthValue1;
	public String firstNameValue2;
	public String firstInitialOfLASTNameValue2;
	public String vitalStatusValue2;
	public String yearOfBirthValue2;
	public String firstNameValue3;
	public String firstInitialOfLASTNameValue3;
	public String vitalStatusValue3;
	public String yearOfBirthValue3;
	public String firstNameValue4;
	public String firstInitialOfLASTNameValue4;
	public String vitalStatusValue4;
	public String yearOfBirthValue4;
	public String relationToPatientValue1;
	public String relationToPatientValue2;
	public String relationToPatientValue3;
	public String relationToPatientValue4;
	public String youAreCurrentlyFillingOutInformation;
	public String parentType;
	public String firstNameValueAdded;
	public String firstInitialOfLASTNameAdded;
	public String yearOfBirthValueAdded;
	public String vitalStatusValueAdded;
	public String sexAssignedAtBirthValueAdded;
	public String genderIdentityValueAdded;
	public String twinOrPartOfAMultipleBirthValueAdded;
	public String typeOfBirthValueAdded;	
	/* Grandchildren */
	public String grandChildren;
	public String grandChild;
	public String addNewGrandChildren;
	public String relationToPatientGrandChild;
	public String sexAssignedAtBirthValue;
	public String pleaseMakeSureYouHaveCompletedAllChildrenRecords;
	/* Cousin */
	public String cousins;
	public String cousin;
	public String addNewCousins;
	public String relationToPatientCousin;
	public String parentOfThisRelativeValue1;
	public String sexAssignedAtBirthValue1;
	public String parentOfThisRelativeValue2;
	public String sexAssignedAtBirthValue2;
	
	/* FETCHING DATA FROM EXCEL BEFORE SUBMITTING FHQ */		
	public void dataInitializerFHQ(String sheetName) {
		/* ****** PARTICIPANT FORM ***** */
		if (sheetName.equals("Participant")) {	
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			asYouGoThroughYourRelativesInformationInTh = testDataForFHQ.get(FHQConstants.AS_YOU_GO_THROUGH_YOUR_RELATIVES_INFORMATION_IN_TH);
			submitFHQQuestionnaire = testDataForFHQ.get(FHQConstants.ONCE_YOU_CLICK_SUBMIT_FHQ_QUESTIONNAIRE);
			note = testDataForFHQ.get(FHQConstants.NOTE);		
			clickHereToStartYourFamilyHealthQuestionnaire = testDataForFHQ.get(FHQConstants.CLICK_HERE_TO_START_YOUR_FAMILY_HEALTH_QUESTIONNAIRE);
			fHQHome = testDataForFHQ.get(FHQConstants.FHQ_HOME);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			youAreCurrentlyFillingOutInformationForTheParticipant = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION_FOR_THE_PARTICIPANT);
			participant = testDataForFHQ.get(FHQConstants.PARTICIPANT);
			thisFormWillAskQuestionsAboutTheParticipantAndTheirChildrenAndSiblings = testDataForFHQ.get(FHQConstants.THIS_FORM_WILL_ASK_QUESTIONS_ABOUT_THE_PARTICIPANT_AND_THEIR_CHILDREN_AND_SIBLINGS);
			ifYouAreFillingOutThisFormForYourselfYouAreReferredToAsTheParticipant = testDataForFHQ.get(FHQConstants.IF_YOU_ARE_FILLING_OUT_THIS_FORM_FOR_YOURSELF_YOU_ARE_REFERRED_TO_AS_THE_PARTICIPANT);
			pleaseIndicateYourRelationshipToTheParticipant = testDataForFHQ.get(FHQConstants.PLEASE_INDICATE_YOUR_RELATIONSHIP_TO_THE_PARTICIPANT);
			theFollowingQuestionsAreAboutTheStudyParticipant = testDataForFHQ.get(FHQConstants.THE_FOLLOWING_QUESTIONS_ARE_ABOUT_THE_STUDY_PARTICIPANT);
			firstNameOfTheParticipant = testDataForFHQ.get(FHQConstants.FIRST_NAME_OF_THE_PARTICIPANT);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);		
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			participantFirstName = testDataForFHQ.get(FHQConstants.PARTICIPANT_FIRST_NAME);
			participantFirstInitialOfLASTName = testDataForFHQ.get(FHQConstants.PARTICIPANT_FIRST_INITIAL_OF_LAST_NAME);
			participantFirstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.PARTICIPANT_FIRST_INITIAL_OF_LAST_NAME_VALUE);
			firstInitialOfLASTNameOfTheParticipant = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_OF_THE_PARTICIPANT);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			hasTheParticipantEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THE_PARTICIPANT_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasParticipantHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_PARTICIPANT_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants. LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			pleaseWriteTheFirstNameOfThePartnersWithWhomTheParticipantHadThePregnancyiesAbove = testDataForFHQ.get(FHQConstants.PLEASE_WRITE_THE_FIRST_NAME_OF_THE_PARTNERS_WITH_WHOM_THE_PARTICIPANT_HAD_THE_PREGNANCYIES_ABOVE);
			pleaseWriteTheFirstNameOfThePartnersWithWhomTheParticipantHadThePregnancyiesAboveMiscarriages = testDataForFHQ.get(FHQConstants.PLEASE_WRITE_THE_FIRST_NAME_OF_THE_PARTNERS_WITH_WHOM_THE_PARTICIPANT_HAD_THE_PREGNANCYIES_ABOVE_MISCARRIAGES);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			pleaseWriteTheFirstNameOfThePartnersWithWhomTheParticipantHadThePregnancyiesAboveStillbirths = testDataForFHQ.get(FHQConstants.PLEASE_WRITE_THE_FIRST_NAME_OF_THE_PARTNERS_WITH_WHOM_THE_PARTICIPANT_HAD_THE_PREGNANCIES_ABOVE_STILLBIRTHS);
			pleaseIncludeLivingAndDeceasedChildren = testDataForFHQ.get(FHQConstants.PLEASE_INCLUDE_LIVING_AND_DECEASED_CHILDREN);
			howManyTotalChildrenAliveAndDeceasedHasTheParticipantHad = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THE_PARTICIPANT_HAD);
			child = testDataForFHQ.get(FHQConstants.CHILD);
			children = testDataForFHQ.get(FHQConstants.CHILDREN);
			add= testDataForFHQ.get(FHQConstants.ADD);
			removeAll= testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions= testDataForFHQ.get(FHQConstants.ACTIONS);
			firstName= testDataForFHQ.get(FHQConstants.FIRST_NAME);
			childfirstName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_NAME);
			childfirstInitialOfLASTName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_INITIAL_OF_LAST_NAME);
			childvitalStatus= testDataForFHQ.get(FHQConstants.CHILD_VITAL_STATUS);
			vitalStatus= testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			noDataToDisplay= testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			howManyTotalDifferentPartnersHasTheParticipantHadBiologicalChildrenWith = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_DIFFERENT_PARTNERS_HAS_THE_PARTICIPANT_HAD_BIOLOGICAL_CHILDREN_WITH);
			pleaseDoNotCountThemHere = testDataForFHQ.get(FHQConstants.PLEASE_DO_NOT_COUNT_THEM_HERE);
			partner = testDataForFHQ.get(FHQConstants.PARTNER);
			partnerfirstName= testDataForFHQ.get(FHQConstants.PARTNER_FIRST_NAME);
			partnerfirstInitialOfLASTName= testDataForFHQ.get(FHQConstants.PARTNER_FIRST_INITIAL_OF_LAST_NAME);
			partnervitalStatus= testDataForFHQ.get(FHQConstants.PARTNER_VITAL_STATUS);		
			weWouldLikeToAskYouSomeQuestionsAboutSiblingsDetails = testDataForFHQ.get(FHQConstants.WE_WOULD_LIKE_TO_ASK_YOU_SOME_QUESTIONS_ABOUT_SIBLINGS_DETAILS);
			howManySiblingsDoesTheParticipantHave = testDataForFHQ.get(FHQConstants.HOW_MANY_SIBLINGS_DOES_THE_PARTICIPANT_HAVE);
			pleaseIncludeAllFullAndHalfSiblings = testDataForFHQ.get(FHQConstants.PLEASE_INCLUDE_ALL_FULL_AND_HALF_SIBLINGS);
			siblings = testDataForFHQ.get(FHQConstants.SIBLINGS);
			typesOfSiblingRelation = testDataForFHQ.get(FHQConstants.TYPES_OF_SIBLING_RELATION);
			typesOfSiblingRelationSelected = testDataForFHQ.get(FHQConstants.TYPES_OF_SIBLING_RELATION_SELECTED);
			firstNameOfSibling = testDataForFHQ.get(FHQConstants.FIRST_NAME_OF_SIBLING);
			siblingFirstName = testDataForFHQ.get(FHQConstants.SIBLING_FIRST_NAME);
			siblingfirstInitialOfLASTName = testDataForFHQ.get(FHQConstants.SIBLING_FIRST_INITIAL_OF_LAST_NAME);
			vitalStatusOfSibling = testDataForFHQ.get(FHQConstants.VITAL_STATUS_OF_SIBLING);
			siblingVitalStatus = testDataForFHQ.get(FHQConstants.SIBLING_VITAL_STATUS);
			isThereAnythingElseYouWouldLikeUsToKnowAboutTheParticipant = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THE_PARTICIPANT);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			relationshipIdentity = testDataForFHQ.get(FHQConstants.RELATIONSHIP_IDENTITY);
			relationshipIdentityValue = testDataForFHQ.get(FHQConstants.RELATIONSHIP_IDENTITY_VALUE);
			firstInitialOfLASTNameParticipant = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_PARTICIPANT);
			participantFirstInitialOfLASTName = testDataForFHQ.get(FHQConstants.PARTICIPANT_FIRST_INITIAL_OF_LAST_NAME);
			participantFirstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.PARTICIPANT_FIRST_INITIAL_OF_LAST_NAME_VALUE);
			pleaseWriteFirstNameOfPartnersWithWhomParticipantHadMiscarriages = testDataForFHQ.get(FHQConstants.PLEASE_WRITE_FIRST_NAME_OF_PARTNERS_WITH_WHOM_PARTICIPANT_HAD_MISCARRIAGES);
			pleaseWriteFirstNameOfPartnersWithWhomParticipantHadStillbirths = testDataForFHQ.get(FHQConstants.PLEASE_WRITE_FIRST_NAME_OF_PARTNERS_WITH_WHOM_PARTICIPANT_HAD_STILLBIRTHS);
			participantValue = testDataForFHQ.get(FHQConstants.PARTICIPANT_VALUE);				
		}

		/* ************* PARTNER FORM ******************** */
		if (sheetName.equals("Partner")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			partners = testDataForFHQ.get(FHQConstants.PARTNERS);
			addNewPartners = testDataForFHQ.get(FHQConstants.ADD_NEW_PARTNERS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationToPatient = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT);
			partnerFirstName = testDataForFHQ.get(FHQConstants.PARTNER_FIRST_NAME);
			partnerFirstInitialOfLASTName = testDataForFHQ.get(FHQConstants.PARTNER_FIRST_INITIAL_OF_LAST_NAME);
			partnerVitalStatus = testDataForFHQ.get(FHQConstants.PARTNER_VITAL_STATUS);
			partnerYearOfBirth = testDataForFHQ.get(FHQConstants.PARTNER_YEAR_OF_BIRTH);
			partnerYearOfBirthValue = testDataForFHQ.get(FHQConstants.PARTNER_YEAR_OF_BIRTH_VALUE);
			partnerRelationToPatient = testDataForFHQ.get(FHQConstants.PARTNER_RELATION_TO_PATIENT);
			youAreCurrentlyFillingOutInformationForTheParticipantPartner = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION_FOR_THE_PARTICIPANTS_PARTNER);
			partner = testDataForFHQ.get(FHQConstants.PARTNER);
			pleaseProvideWhatInformationYouCanAboutThisPartner = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_WHAT_INFORMATION_YOU_CAN_ABOUT_THIS_PARTNER);
			basicInformation = testDataForFHQ.get(FHQConstants.BASIC_INFORMATION);
			isThisTheParticipantCurrentPartner = testDataForFHQ.get(FHQConstants.IS_THIS_THE_PARTICIPANT_CURRENT_PARTNER);
			isThisTheParticipantCurrentPartnerValue = testDataForFHQ.get(FHQConstants.IS_THIS_THE_PARTICIPANT_CURRENT_PARTNER_VALUE);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			partnerSexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTNER_SEX_ASSIGNED_AT_BIRTH);
			partnerGenderIdentity = testDataForFHQ.get(FHQConstants.PARTNER_GENDER_IDENTITY);
			isTheParticipantBloodRelatedToThisPerson = testDataForFHQ.get(FHQConstants.IS_THE_PARTICIPANT_BLOOD_RELATED_TO_THIS_PERSON);
			ifYouAreFillingOutThisFormForYourself = testDataForFHQ.get(FHQConstants.IF_YOU_ARE_FILLING_OUT_THIS_FORM_FOR_YOURSELF);
			isTheParticipantBloodRelated = testDataForFHQ.get(FHQConstants.IS_THE_PARTICIPANT_BLOOD_RELATED_);
			pleaseDescribeHowTheParticipantIsRelatedToThisPerson = testDataForFHQ.get(FHQConstants.PLEASE_DESCRIBE_HOW_THE_PARTICIPANT_IS_RELATED_TO_THIS_PERSON);
			describeTheParticipantRelatedToThisPerson = testDataForFHQ.get(FHQConstants.DESCRIBE_THE_PARTICIPANT_RELATED_TO_THIS_PERSON);
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnyAdditionalInformationYouWouldLikeUsToKnowOrUnderstandAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANY_ADDITIONAL_INFORMATION_YOU_WOULD_LIKE_US_TO_KNOW_OR_UNDERSTAND_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);		
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			partnerYearOfBirthValueNV = testDataForFHQ.get(FHQConstants.PARTNER_YEAR_OF_BIRTH_VALUE_NV);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
		}

		/* ************* MOTHER FORM ******************** */
		if (sheetName.equals("Mother")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			asYouGoThroughYourRelativesInformationInTh = testDataForFHQ.get(FHQConstants.AS_YOU_GO_THROUGH_YOUR_RELATIVES_INFORMATION_IN_TH);
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			parents = testDataForFHQ.get(FHQConstants.PARENTS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			all = testDataForFHQ.get(FHQConstants.ALL);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationToPatientParent = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_PARENT);
			relationsToPatient = testDataForFHQ.get(FHQConstants.RELATIONS_TO_PATIENT);		
			/* Parent List View Value */
			firstNameValue1 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_1);
			firstInitialOfLASTNameValue1 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_1);
			vitalStatusValue1 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_1);
			yearOfBirthValue1 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_1);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);
			firstNameValue2 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_2);
			firstInitialOfLASTNameValue2 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_2);
			vitalStatusValue2 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_2);
			yearOfBirthValue2 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_2);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);
			parentType = testDataForFHQ.get(FHQConstants.PARENT_TYPE);
			youAreCurrentlyFillingOutInformation= testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			iDoNotKnowAnyInformationAboutThisBiologicalRelative = testDataForFHQ.get(FHQConstants.I_DO_NOT_KNOW_ANY_INFORMATION_ABOUT_THIS_BIOLOGICAL_RELATIVE);	
			basicInformation = testDataForFHQ.get(FHQConstants.BASIC_INFORMATION);	
			firstNameValueAdded = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_ADDED);
			firstInitialOfLASTNameAdded = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_ADDED);
			wasThisRelativeAdopted = testDataForFHQ.get(FHQConstants.WAS_THIS_RELATIVE_ADOPTED);
			relativeAdoptedValueSelected = testDataForFHQ.get(FHQConstants.RELATIVE_ADOPTED_VALUE_SELECTED);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);			
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			vitalStatusValueAdded = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_ADDED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValueAdded = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE_ADDED);
			typeOfBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_TYPE_OF_BIRTH);
			typeOfBirthValueAdded = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE_ADDED);
			/* Miscarriages Info */
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);	
			/* RASOPATHY Form */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Sibling ADDITION */
			howManySiblingsDoesThisRelativeHave = testDataForFHQ.get(FHQConstants.HOW_MANY_SIBLINGS_DOES_THIS_RELATIVE_HAVE);
			howManySiblingsDoesThisRelativeHaveBanner = testDataForFHQ.get(FHQConstants.HOW_MANY_SIBLINGS_DOES_THIS_RELATIVE_HAVE_BANNER);
			howManySiblingsDoesThisRelativeHaveValue = testDataForFHQ.get(FHQConstants.HOW_MANY_SIBLINGS_DOES_THIS_RELATIVE_HAVE_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachSiblingThisRelativeHas = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_SIBLING_THIS_RELATIVE_HAS);
			siblings = testDataForFHQ.get(FHQConstants.SIBLINGS);
			typesOfSiblingRelation = testDataForFHQ.get(FHQConstants.TYPES_OF_SIBLING_RELATION);
			typesOfSiblingRelationSelected = testDataForFHQ.get(FHQConstants.TYPES_OF_SIBLING_RELATION_SELECTED);
			firstNameOfSibling = testDataForFHQ.get(FHQConstants.FIRST_NAME_OF_SIBLING);
			siblingFirstNameValue = testDataForFHQ.get(FHQConstants.SIBLING_FIRST_NAME_VALUE);	
			siblingFirstInitialOfLastNameValue = testDataForFHQ.get(FHQConstants.SIBLING_FIRST_INITIAL_OF_LAST_NAME_VALUE);
			vitalStatusOfSibling = testDataForFHQ.get(FHQConstants.VITAL_STATUS_OF_SIBLING);
			siblingVitalStatusValue = testDataForFHQ.get(FHQConstants.SIBLING_VITAL_STATUS_VALUE);	
			/* Other */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);	
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/* ************* FATHER FORM ******************** */
		if (sheetName.equals("Father")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			asYouGoThroughYourRelativesInformationInTh = testDataForFHQ.get(FHQConstants.AS_YOU_GO_THROUGH_YOUR_RELATIVES_INFORMATION_IN_TH);
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			parents = testDataForFHQ.get(FHQConstants.PARENTS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			all = testDataForFHQ.get(FHQConstants.ALL);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationToPatientParent = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_PARENT);
			relationsToPatient = testDataForFHQ.get(FHQConstants.RELATIONS_TO_PATIENT);				
			firstNameValue1 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_1);
			firstInitialOfLASTNameValue1 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_1);
			vitalStatusValue1 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_1);
			yearOfBirthValue1 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_1);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);
			firstNameValue2 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_2);
			firstInitialOfLASTNameValue2 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_2);
			vitalStatusValue2 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_2);
			yearOfBirthValue2 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_2);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);
			parentType = testDataForFHQ.get(FHQConstants.PARENT_TYPE);
			youAreCurrentlyFillingOutInformation= testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			iDoNotKnowAnyInformationAboutThisBiologicalRelative = testDataForFHQ.get(FHQConstants.I_DO_NOT_KNOW_ANY_INFORMATION_ABOUT_THIS_BIOLOGICAL_RELATIVE);	
			basicInformation = testDataForFHQ.get(FHQConstants.BASIC_INFORMATION);	
			firstNameValueAdded = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_ADDED);
			firstInitialOfLASTNameAdded = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_ADDED);
			wasThisRelativeAdopted = testDataForFHQ.get(FHQConstants.WAS_THIS_RELATIVE_ADOPTED);
			relativeAdoptedValueSelected = testDataForFHQ.get(FHQConstants.RELATIVE_ADOPTED_VALUE_SELECTED);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);			
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			vitalStatusValueAdded = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_ADDED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValueAdded = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE_ADDED);
			typeOfBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_TYPE_OF_BIRTH);
			typeOfBirthValueAdded = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE_ADDED);
			/* Miscarriage Questions */
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);	
			/* RASOPATHY Form */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			//specifyOtherBenignTumor = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_BENIGN_TUMOR);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Sibling ADDITION */
			howManySiblingsDoesThisRelativeHave = testDataForFHQ.get(FHQConstants.HOW_MANY_SIBLINGS_DOES_THIS_RELATIVE_HAVE);
			howManySiblingsDoesThisRelativeHaveBanner = testDataForFHQ.get(FHQConstants.HOW_MANY_SIBLINGS_DOES_THIS_RELATIVE_HAVE_BANNER);
			howManySiblingsDoesThisRelativeHaveValue = testDataForFHQ.get(FHQConstants.HOW_MANY_SIBLINGS_DOES_THIS_RELATIVE_HAVE_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachSiblingThisRelativeHas = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_SIBLING_THIS_RELATIVE_HAS);
			siblings = testDataForFHQ.get(FHQConstants.SIBLINGS);
			typesOfSiblingRelation = testDataForFHQ.get(FHQConstants.TYPES_OF_SIBLING_RELATION);
			typesOfSiblingRelationSelected = testDataForFHQ.get(FHQConstants.TYPES_OF_SIBLING_RELATION_SELECTED);
			firstNameOfSibling = testDataForFHQ.get(FHQConstants.FIRST_NAME_OF_SIBLING);
			siblingFirstNameValue = testDataForFHQ.get(FHQConstants.SIBLING_FIRST_NAME_VALUE);	
			siblingFirstInitialOfLastNameValue = testDataForFHQ.get(FHQConstants.SIBLING_FIRST_INITIAL_OF_LAST_NAME_VALUE);
			vitalStatusOfSibling = testDataForFHQ.get(FHQConstants.VITAL_STATUS_OF_SIBLING);
			siblingVitalStatusValue = testDataForFHQ.get(FHQConstants.SIBLING_VITAL_STATUS_VALUE);	
			/* Other */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/*  *********** Children FORM ************** */
		if (sheetName.equals("Children")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			sonsDaughters = testDataForFHQ.get(FHQConstants.SONS_DAUGHTERS);
			addNewSonsDaughters = testDataForFHQ.get(FHQConstants.ADD_NEW_SONS_DAUGHTERS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			all = testDataForFHQ.get(FHQConstants.ALL);
			relationToPatientSonDaughter = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_SON_DAUGHTER);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			parentOfThisRelative = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationToPatient = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.CHILD_SEX_ASSIGNED_AT_BIRTH);
			childFirstNameValue = testDataForFHQ.get(FHQConstants.CHILD_FIRST_NAME_VALUE);
			childFirstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.CHILD_FIRST_INITIAL_OF_LAST_NAME_VALUE);
			parentOfThisRelativeValue = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE_VALUE);
			childVitalStatusValue = testDataForFHQ.get(FHQConstants.CHILD_VITAL_STATUS_VALUE);
			childYearOfBirthValue = testDataForFHQ.get(FHQConstants.CHILD_YEAR_OF_BIRTH_VALUE);
			relationToPatientValue = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE);
			childSexAssignedAtBirthValue = testDataForFHQ.get(FHQConstants.CHILD_SEX_ASSIGNED_AT_BIRTH_VALUE);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			sonDaughter = testDataForFHQ.get(FHQConstants.SON_DAUGHTER);		
			pleaseMakeSureYouHaveCompletedAllPartnerRecordsBeforeCompletingChildrenRecords = testDataForFHQ.get(FHQConstants.PLEASE_MAKE_SURE_YOU_HAVE_COMPLETED_ALL_PARTNER_RECORDS_BEFORE_COMPLETING_CHILDREN_RECORDS);
			youAreCurrentlyFillingOutInformationForTheParticipantsSonDaughter = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION_FOR_THE_PARTICIPANTS_SON_DAUGHTER);
			childBasicInformation = testDataForFHQ.get(FHQConstants.CHILD_BASIC_INFORMATION);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);
			childYearOfBirthSelected = testDataForFHQ.get(FHQConstants.CHILD_YEAR_OF_BIRTH_SELECTED);
			childSexAssignedAtBirthSelected = testDataForFHQ.get(FHQConstants.CHILD_SEX_ASSIGNED_AT_BIRTH_SELECTED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			childGenderIdentitySelected = testDataForFHQ.get(FHQConstants.CHILD_GENDER_IDENTITY_SELECTED);
			whichBestDescribesThisRelative = testDataForFHQ.get(FHQConstants.WHICH_BEST_DESCRIBES_THIS_RELATIVE);
			whichBestDescribesThisRelativeSelected = testDataForFHQ.get(FHQConstants.WHICH_BEST_DESCRIBES_THIS_RELATIVE_SELECTED);
			areAnyOfTheFollowingIndividualsABiologicalParentOfThisChild = testDataForFHQ.get(FHQConstants.ARE_ANY_OF_THE_FOLLOWING_INDIVIDUALS_A_BIOLOGICAL_PARENT_OF_THIS_CHILD);
			areAnyOfTheFollowingIndividualsABiologicalParentOfThisChildSelected = testDataForFHQ.get(FHQConstants.ARE_ANY_OF_THE_FOLLOWING_INDIVIDUALS_A_BIOLOGICAL_PARENT_OF_THIS_CHILD_SELECTED);
			partnerNameHelpBanner = testDataForFHQ.get(FHQConstants.PARTNER_NAME_HELP_BANNER);
			whichOfTheFollowingIndividualsIsABiologicalParentOfThisChild = testDataForFHQ.get(FHQConstants.WHICH_OF_THE_FOLLOWING_INDIVIDUALS_IS_A_BIOLOGICAL_PARENT_OF_THIS_CHILD);
			whichOfTheFollowingIndividualsIsABiologicalParentOfThisChildSelected = testDataForFHQ.get(FHQConstants.WHICH_OF_THE_FOLLOWING_INDIVIDUALS_IS_A_BIOLOGICAL_PARENT_OF_THIS_CHILD_SELECTED);
			otherBiologicalParentHelpBanner = testDataForFHQ.get(FHQConstants.OTHER_BIOLOGICAL_PARENT_HELP_BANNER);
			otherBiologicalParentSelected = testDataForFHQ.get(FHQConstants.OTHER_BIOLOGICAL_PARENT_SELECTED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValue = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE);
			typeOfBirth = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTHS);
			typeOfBirthValue = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);	
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);
			/* RASopathy Form for Child */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);		
			/* Cancer Form for Child */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);	
			/* Benign Tumor Form */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);			
			/* Medical Condition Form for Child */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Child's Child Information */
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHad = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD);
			childBanner = testDataForFHQ.get(FHQConstants.CHILD_BANNER);
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHadSelected = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD_SELECTED);		
			pleaseSelectTheAddButtonBelowToAddEachChildThisRelativeHas = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CHILD_THIS_RELATIVE_HAS);
			child = testDataForFHQ.get(FHQConstants.CHILD);
			children = testDataForFHQ.get(FHQConstants.CHILDREN);
			add= testDataForFHQ.get(FHQConstants.ADD);
			removeAll= testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions= testDataForFHQ.get(FHQConstants.ACTIONS);
			childfirstName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_NAME);
			childfirstInitialOfLASTName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_INITIAL_OF_LAST_NAME);
			childvitalStatus= testDataForFHQ.get(FHQConstants.CHILD_VITAL_STATUS);
			noDataToDisplay= testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Other for Child */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/* ************* SIBLING FORM ******************** */
		if (sheetName.equals("Sibling")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			siblings = testDataForFHQ.get(FHQConstants.SIBLINGS);
			addNewSiblings = testDataForFHQ.get(FHQConstants.ADD_NEW_SIBLINGS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			typeOfSibling = testDataForFHQ.get(FHQConstants.TYPE_OF_SIBLING);	
			firstNameValue = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE);
			firstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE);
			vitalStatusValue = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE);
			yearOfBirthValue = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE);	
			typeOfSiblingValue = testDataForFHQ.get(FHQConstants.TYPE_OF_SIBLING_VALUE);		
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			sibling = testDataForFHQ.get(FHQConstants.SIBLING);
			siblingBanner = testDataForFHQ.get(FHQConstants.SIBLING_BANNER);
			siblingBasicInformation = testDataForFHQ.get(FHQConstants.SIBLING_BASIC_INFORMATION);
			youAreCurrentlyFillingOutInformation = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);	
			sexAssignedAtBirthValue = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);			
			/* Twin or Multiple Birth Question for Sibling */ 
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValue = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE);
			typeOfBirth = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTHS);
			typeOfBirthValue = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE);	
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);
			/* RASopathy Form for Siblings */
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form for Siblings */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form for Siblings */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Sibling's Child Information */
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHad = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD);
			childBanner = testDataForFHQ.get(FHQConstants.CHILD_BANNER);
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHadSelected = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD_SELECTED);		
			pleaseSelectTheAddButtonBelowToAddEachChildThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CHILD_THIS_RELATIVE_HAS_HAD);
			child = testDataForFHQ.get(FHQConstants.CHILD);
			children = testDataForFHQ.get(FHQConstants.CHILDREN);
			add= testDataForFHQ.get(FHQConstants.ADD);
			removeAll= testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions= testDataForFHQ.get(FHQConstants.ACTIONS);
			childfirstName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_NAME);
			childfirstInitialOfLASTName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_INITIAL_OF_LAST_NAME);
			childvitalStatus= testDataForFHQ.get(FHQConstants.CHILD_VITAL_STATUS);
			noDataToDisplay= testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Other for Sibling */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/* ************* AUNT FORM ******************** */
		if (sheetName.equals("Aunt")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			auntUncles = testDataForFHQ.get(FHQConstants.AUNT_UNCLES);
			addNewauntUncles = testDataForFHQ.get(FHQConstants.ADD_NEW_AUNT_UNCLES);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationsToPatient = testDataForFHQ.get(FHQConstants.RELATIONS_TO_PATIENT);
			auntUncleFirstNameValue1 = testDataForFHQ.get(FHQConstants.AUNT_UNCLE_FIRST_NAME_VALUE_1);
			auntUncleFirstInitialOfLASTNameValue1 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_FIRST_INITIAL_OF_LAST_NAME_VALUE_1);
			auntUncleVitalStatusValue1 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_VITAL_STATUS_VALUE_1);
			auntUncleYearOfBirthValue1 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_YEAR_OF_BIRTH_VALUE_1);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);		
			auntUncleFirstNameValue2 = testDataForFHQ.get(FHQConstants.AUNT_UNCLE_FIRST_NAME_VALUE_2);
			auntUncleFirstInitialOfLASTNameValue2 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_FIRST_INITIAL_OF_LAST_NAME_VALUE_2);
			auntUncleVitalStatusValue2 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_VITAL_STATUS_VALUE_2);
			auntUncleYearOfBirthValue2 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_YEAR_OF_BIRTH_VALUE_2);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);		
			auntUncleFirstNameValue = testDataForFHQ.get(FHQConstants.AUNT_UNCLE_FIRST_NAME_VALUE);
			auntUncleFirstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_FIRST_INITIAL_OF_LAST_NAME_VALUE);
			auntUncleVitalStatusValue = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_VITAL_STATUS_VALUE);
			relationToPatientValue = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE);
			auntUncle = testDataForFHQ.get(FHQConstants.AUNT_UNCLE);
			auntsUnclesDetails = testDataForFHQ.get(FHQConstants.AUNTS_UNCLES_DETAILS);
			auntUncleBanner = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_BANNER);
			youAreCurrentlyFillingOutInformationForTheParticipantsAuntUncle = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION_FOR_THE_PARTICIPANTS_AUNT_UNCLE);
			auntUncleBasicInformation = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_BASIC_INFORMATION);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			auntUncleYearOfBirthSelected = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_YEAR_OF_BIRTH_SELECTED);
			auntUncleSexAssignedAtBirthSelected = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_SEX_ASSIGNED_AT_BIRTH_SELECTED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			auntUncleGenderIdentitySelected = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_GENDER_IDENTITY_SELECTED);
			/* Twin or Multiple Birth Question for Aunt */ 
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValue = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE);
			typeOfBirth = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTHS);
			typeOfBirthValue = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);
			/* RASopathy Form for Aunt */
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form for Aunt */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form for Aunt */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form for Aunt */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Aunt's Child Information */
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHad = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD);
			childBanner = testDataForFHQ.get(FHQConstants.CHILD_BANNER);
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHadSelected = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD_SELECTED);		
			pleaseSelectTheAddButtonBelowToAddEachChildThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CHILD_THIS_RELATIVE_HAS_HAD);
			child = testDataForFHQ.get(FHQConstants.CHILD);
			children = testDataForFHQ.get(FHQConstants.CHILDREN);
			add= testDataForFHQ.get(FHQConstants.ADD);
			removeAll= testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions= testDataForFHQ.get(FHQConstants.ACTIONS);
			childfirstName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_NAME);
			childfirstInitialOfLASTName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_INITIAL_OF_LAST_NAME);
			childvitalStatus= testDataForFHQ.get(FHQConstants.CHILD_VITAL_STATUS);
			noDataToDisplay= testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Other for Aunt */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);	
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
			siblingTo = testDataForFHQ.get(FHQConstants.SIBLING_TO);
			typeOfSiblingNV = testDataForFHQ.get(FHQConstants.TYPE_OF_SIBLING_NV);
			typeOfSiblingValueNV = testDataForFHQ.get(FHQConstants.TYPE_OF_SIBLING_VALUE_NV);
		}

		/* ************* UNCLE FORM ******************** */
		if (sheetName.equals("Uncle")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			auntUncles = testDataForFHQ.get(FHQConstants.AUNT_UNCLES);
			addNewauntUncles = testDataForFHQ.get(FHQConstants.ADD_NEW_AUNT_UNCLES);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationsToPatient = testDataForFHQ.get(FHQConstants.RELATIONS_TO_PATIENT);
			auntUncleFirstNameValue1 = testDataForFHQ.get(FHQConstants.AUNT_UNCLE_FIRST_NAME_VALUE_1);
			auntUncleFirstInitialOfLASTNameValue1 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_FIRST_INITIAL_OF_LAST_NAME_VALUE_1);
			auntUncleVitalStatusValue1 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_VITAL_STATUS_VALUE_1);
			auntUncleYearOfBirthValue1 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_YEAR_OF_BIRTH_VALUE_1);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);		
			auntUncleFirstNameValue2 = testDataForFHQ.get(FHQConstants.AUNT_UNCLE_FIRST_NAME_VALUE_2);
			auntUncleFirstInitialOfLASTNameValue2 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_FIRST_INITIAL_OF_LAST_NAME_VALUE_2);
			auntUncleVitalStatusValue2 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_VITAL_STATUS_VALUE_2);
			auntUncleYearOfBirthValue2 = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_YEAR_OF_BIRTH_VALUE_2);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);		
			relationToPatientValue = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE);
			auntUncleFirstNameValue = testDataForFHQ.get(FHQConstants.AUNT_UNCLE_FIRST_NAME_VALUE);
			auntUncleFirstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_FIRST_INITIAL_OF_LAST_NAME_VALUE);
			auntUncleVitalStatusValue = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_VITAL_STATUS_VALUE);
			relationToPatientValue = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE);
			auntUncle = testDataForFHQ.get(FHQConstants.AUNT_UNCLE);
			auntsUnclesDetails = testDataForFHQ.get(FHQConstants.AUNTS_UNCLES_DETAILS);
			auntUncleBanner = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_BANNER);
			youAreCurrentlyFillingOutInformationForTheParticipantsAuntUncle = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION_FOR_THE_PARTICIPANTS_AUNT_UNCLE);
			auntUncleBasicInformation = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_BASIC_INFORMATION);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			auntUncleYearOfBirthSelected = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_YEAR_OF_BIRTH_SELECTED);
			auntUncleSexAssignedAtBirthSelected = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_SEX_ASSIGNED_AT_BIRTH_SELECTED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			auntUncleGenderIdentitySelected = testDataForFHQ.get(FHQConstants. AUNT_UNCLE_GENDER_IDENTITY_SELECTED);
			/* Twin or Multiple Birth Question for Uncle */ 
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValue = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE);
			typeOfBirth = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTHS);
			typeOfBirthValue = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);	
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);
			/* RASopathy Form for Uncle */
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form for Uncle */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);	
			/* Benign Tumor Form for Uncle */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form for Uncle */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Uncle's Child Information */
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHad = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD);
			childBanner = testDataForFHQ.get(FHQConstants.CHILD_BANNER);
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHadSelected = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD_SELECTED);		
			pleaseSelectTheAddButtonBelowToAddEachChildThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CHILD_THIS_RELATIVE_HAS_HAD);
			child = testDataForFHQ.get(FHQConstants.CHILD);
			children = testDataForFHQ.get(FHQConstants.CHILDREN);
			add= testDataForFHQ.get(FHQConstants.ADD);
			removeAll= testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions= testDataForFHQ.get(FHQConstants.ACTIONS);
			childfirstName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_NAME);
			childfirstInitialOfLASTName= testDataForFHQ.get(FHQConstants.CHILD_FIRST_INITIAL_OF_LAST_NAME);
			childvitalStatus= testDataForFHQ.get(FHQConstants.CHILD_VITAL_STATUS);
			noDataToDisplay= testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Other for Uncle */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);	
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
			siblingTo = testDataForFHQ.get(FHQConstants.SIBLING_TO);
			typeOfSiblingNV = testDataForFHQ.get(FHQConstants.TYPE_OF_SIBLING_NV);
			typeOfSiblingValueNV = testDataForFHQ.get(FHQConstants.TYPE_OF_SIBLING_VALUE_NV);
		}

		/*  *********** NieceNephew FORM ******************* */
		if (sheetName.equals("NieceNephew")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			niecesNephews = testDataForFHQ.get(FHQConstants. NIECES_NEPHEWS);
			addNewNiecesNephews  = testDataForFHQ.get(FHQConstants.ADD_NEW_NIECES_NEPHEWS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			all = testDataForFHQ.get(FHQConstants.ALL);
			relationToPatientNieceNephew = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_NIECE_NEPHEW);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			parentOfThisRelative = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationToPatient = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW_SEX_ASSIGNED_AT_BIRTH);
			nieceNephewFirstNameValue = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW_FIRST_NAME_VALUE);
			nieceNephewFirstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW_FIRST_INITIAL_OF_LAST_NAME_VALUE);
			parentOfThisRelativeValue = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE_VALUE);
			nieceNephewVitalStatusValue = testDataForFHQ.get(FHQConstants. NIECE_NEPHEW_VITAL_STATUS_VALUE);
			nieceNephewYearOfBirthValue = testDataForFHQ.get(FHQConstants. NIECE_NEPHEW_YEAR_OF_BIRTH_VALUE);
			relationToPatientValue = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE);
			nieceNephewSexAssignedAtBirthValue = testDataForFHQ.get(FHQConstants. NIECE_NEPHEW_SEX_ASSIGNED_AT_BIRTH_VALUE);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			nieceNephew = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW);
			pleaseMakeSureYouHaveCompletedAllSiblingRecords = testDataForFHQ.get(FHQConstants.PLEASE_MAKE_SURE_YOU_HAVE_COMPLETED_ALL_SIBLING_RECORDS);
			youAreCurrentlyFillingOutInformationForTheParticipantsNieceNephew = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION_FOR_THE_PARTICIPANTS_NIECE_NEPHEW);
			nieceNephewBasicInformation = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW_BASIC_INFORMATION);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);
			neiceNephewYearOfBirthSelected = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW_YEAR_OF_BIRTH_SELECTED);
			//nieceNephewVitalStatusSelected = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW_VITAL_STATUS_SELECTED);
			neiceNephewSexAssignedAtBirthSelected = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW_SEX_ASSIGNED_AT_BIRTH_SELECTED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			neiceNephewGenderIdentitySelected = testDataForFHQ.get(FHQConstants.NIECE_NEPHEW_GENDER_IDENTITY_SELECTED);
			whichBestDescribesThisRelative = testDataForFHQ.get(FHQConstants.WHICH_BEST_DESCRIBES_THIS_RELATIVE);
			whichBestDescribesThisRelativeSelected = testDataForFHQ.get(FHQConstants.WHICH_BEST_DESCRIBES_THIS_RELATIVE_SELECTED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValue = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE);
			typeOfBirth = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTHS);
			typeOfBirthValue = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);	
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);
			/* RASopathy Form for Niece/Nephew */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);		
			/* Cancer Form for Niece/Nephew */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form for Niece/Nephew */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form for Niece/Nephew */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Niece/Nephew's Child Information */
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHad = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD);
			childBanner = testDataForFHQ.get(FHQConstants.CHILD_BANNER);
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHadSelected = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD_SELECTED);		
			/* Other for Niece/Nephew */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);	
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/* ************* MaternalGrandFather FORM ******************** */
		if (sheetName.equals("MaternalGrandFather")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			grandParents = testDataForFHQ.get(FHQConstants.GRANDPARENTS);
			addNewGrandParents = testDataForFHQ.get(FHQConstants.ADD_NEW_GRANDPARENTS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			//theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			all = testDataForFHQ.get(FHQConstants.ALL);
			relationToPatientGrandParent = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_GRANDPARENT);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			parentOfThisRelative = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationsToPatient = testDataForFHQ.get(FHQConstants.RELATIONS_TO_PATIENT);
			firstNameValue = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE);
			firstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE);
			vitalStatusValue = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE);
			yearOfBirthValue = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);
			relationToPatientValue3 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_3);
			relationToPatientValue4 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_4);
			firstNameValue3 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_3);
			firstInitialOfLASTNameValue3 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_3);
			vitalStatusValue3 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_3);
			yearOfBirthValue3 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_3);
			firstNameValue4 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_4);
			firstInitialOfLASTNameValue4 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_4);
			vitalStatusValue4 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_4);
			yearOfBirthValue4 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_4);
			parentType = testDataForFHQ.get(FHQConstants.PARENT_TYPE);
			youAreCurrentlyFillingOutInformation = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			iDoNotKnowAnyInformationAboutThisBiologicalRelative = testDataForFHQ.get(FHQConstants.I_DO_NOT_KNOW_ANY_INFORMATION_ABOUT_THIS_BIOLOGICAL_RELATIVE);
			basicInformation = testDataForFHQ.get(FHQConstants.BASIC_INFORMATION);
			firstNameValueAdded = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_ADDED);
			firstInitialOfLASTNameAdded = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_ADDED);
			wasThisRelativeAdopted = testDataForFHQ.get(FHQConstants.WAS_THIS_RELATIVE_ADOPTED);
			relativeAdoptedValueSelected = testDataForFHQ.get(FHQConstants.RELATIVE_ADOPTED_VALUE_SELECTED);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);			
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			vitalStatusValueAdded = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_ADDED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValueAdded = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE_ADDED);
			typeOfBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_TYPE_OF_BIRTH);
			typeOfBirthValueAdded = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE_ADDED);
			/* Misscariages Info */
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);			
			/* RASOPATHY Form */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Other */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/*  ************** PaternalGrandFather ************* */
		if (sheetName.equals("PaternalGrandFather")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			grandParents = testDataForFHQ.get(FHQConstants.GRANDPARENTS);
			addNewGrandParents = testDataForFHQ.get(FHQConstants.ADD_NEW_GRANDPARENTS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			all = testDataForFHQ.get(FHQConstants.ALL);
			relationToPatientGrandParent = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_GRANDPARENT);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			parentOfThisRelative = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationsToPatient = testDataForFHQ.get(FHQConstants.RELATIONS_TO_PATIENT);
			firstNameValue = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE);
			firstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE);
			vitalStatusValue = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE);
			yearOfBirthValue = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);
			relationToPatientValue3 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_3);
			relationToPatientValue4 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_4);
			firstNameValue3 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_3);
			firstInitialOfLASTNameValue3 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_3);
			vitalStatusValue3 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_3);
			yearOfBirthValue3 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_3);
			firstNameValue4 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_4);
			firstInitialOfLASTNameValue4 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_4);
			vitalStatusValue4 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_4);
			yearOfBirthValue4 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_4);
			parentType = testDataForFHQ.get(FHQConstants.PARENT_TYPE);
			youAreCurrentlyFillingOutInformation = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			iDoNotKnowAnyInformationAboutThisBiologicalRelative = testDataForFHQ.get(FHQConstants.I_DO_NOT_KNOW_ANY_INFORMATION_ABOUT_THIS_BIOLOGICAL_RELATIVE);
			basicInformation = testDataForFHQ.get(FHQConstants.BASIC_INFORMATION);
			firstNameValueAdded = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_ADDED);
			firstInitialOfLASTNameAdded = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_ADDED);
			wasThisRelativeAdopted = testDataForFHQ.get(FHQConstants.WAS_THIS_RELATIVE_ADOPTED);
			relativeAdoptedValueSelected = testDataForFHQ.get(FHQConstants.RELATIVE_ADOPTED_VALUE_SELECTED);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);			
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			vitalStatusValueAdded = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_ADDED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValueAdded = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE_ADDED);
			typeOfBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_TYPE_OF_BIRTH);
			typeOfBirthValueAdded = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE_ADDED);
			/* Misscariages Info */
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);			
			/* RASOPATHY Form */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Other */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/*  ***************** MaternalGrandMother ******************* */
		if (sheetName.equals("MaternalGrandMother")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			grandParents = testDataForFHQ.get(FHQConstants.GRANDPARENTS);
			addNewGrandParents = testDataForFHQ.get(FHQConstants.ADD_NEW_GRANDPARENTS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			all = testDataForFHQ.get(FHQConstants.ALL);
			relationToPatientGrandParent = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_GRANDPARENT);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			parentOfThisRelative = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationsToPatient = testDataForFHQ.get(FHQConstants.RELATIONS_TO_PATIENT);
			firstNameValue = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE);
			firstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE);
			vitalStatusValue = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE);
			yearOfBirthValue = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);
			relationToPatientValue3 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_3);
			relationToPatientValue4 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_4);	
			parentType = testDataForFHQ.get(FHQConstants.PARENT_TYPE);
			youAreCurrentlyFillingOutInformation = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			iDoNotKnowAnyInformationAboutThisBiologicalRelative = testDataForFHQ.get(FHQConstants.I_DO_NOT_KNOW_ANY_INFORMATION_ABOUT_THIS_BIOLOGICAL_RELATIVE);
			basicInformation = testDataForFHQ.get(FHQConstants.BASIC_INFORMATION);
			firstNameValueAdded = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_ADDED);
			firstInitialOfLASTNameAdded = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_ADDED);
			wasThisRelativeAdopted = testDataForFHQ.get(FHQConstants.WAS_THIS_RELATIVE_ADOPTED);
			relativeAdoptedValueSelected = testDataForFHQ.get(FHQConstants.RELATIVE_ADOPTED_VALUE_SELECTED);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);			
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			vitalStatusValueAdded = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_ADDED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValueAdded = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE_ADDED);
			typeOfBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_TYPE_OF_BIRTH);
			typeOfBirthValueAdded = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE_ADDED);
			/* Misscariages Info */
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);			
			/* RASOPATHY Form */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Other */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);	
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/*  ************** PaternalGrandMother FORM **************** */
		if (sheetName.equals("PaternalGrandMother")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			grandParents = testDataForFHQ.get(FHQConstants.GRANDPARENTS);
			addNewGrandParents = testDataForFHQ.get(FHQConstants.ADD_NEW_GRANDPARENTS);
			theBlueHighlightedRowsRepresentTheIncompletedFamilyRecords = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_REPRESENT_THE_INCOMPLETED_FAMILY_RECORDS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			all = testDataForFHQ.get(FHQConstants.ALL);
			relationToPatientGrandParent = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_GRANDPARENT);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			parentOfThisRelative = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE);
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			relationsToPatient = testDataForFHQ.get(FHQConstants.RELATIONS_TO_PATIENT);
			firstNameValue = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE);
			firstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE);
			vitalStatusValue = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE);
			yearOfBirthValue = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE);
			firstNameValue4 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_4);
			firstInitialOfLASTNameValue4 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_4);
			vitalStatusValue4 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_4);
			yearOfBirthValue4 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_4);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);
			relationToPatientValue3 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_3);
			relationToPatientValue4 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_4);	
			parentType = testDataForFHQ.get(FHQConstants.PARENT_TYPE);
			youAreCurrentlyFillingOutInformation= testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			iDoNotKnowAnyInformationAboutThisBiologicalRelative = testDataForFHQ.get(FHQConstants.I_DO_NOT_KNOW_ANY_INFORMATION_ABOUT_THIS_BIOLOGICAL_RELATIVE);
			basicInformation = testDataForFHQ.get(FHQConstants.BASIC_INFORMATION);
			firstNameValueAdded = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_ADDED);
			firstInitialOfLASTNameAdded = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_ADDED);
			wasThisRelativeAdopted = testDataForFHQ.get(FHQConstants.WAS_THIS_RELATIVE_ADOPTED);
			relativeAdoptedValueSelected = testDataForFHQ.get(FHQConstants.RELATIVE_ADOPTED_VALUE_SELECTED);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);			
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			vitalStatusValueAdded = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_ADDED);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValueAdded = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE_ADDED);
			typeOfBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_TYPE_OF_BIRTH);
			typeOfBirthValueAdded = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE_ADDED);
			/* Misscariages Info */
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);			
			/* RASOPATHY Form */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);
			/* Cancer Form */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);
			/* Other */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/*  *********** GrandChildren FORM ******************* */
		if (sheetName.equals("GrandChildren")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			grandChildren = testDataForFHQ.get(FHQConstants.GRANDCHILDREN);
			addNewGrandChildren = testDataForFHQ.get(FHQConstants.ADD_NEW_GRANDCHILDREN);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			all = testDataForFHQ.get(FHQConstants.ALL);
			relationToPatientGrandChild = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_GRANDCHILD);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstNameValue = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			firstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE);
			parentOfThisRelative = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE);
			parentOfThisRelativeValue = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE_VALUE);	
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			vitalStatusValue = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			yearOfBirthValue = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE);
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);	
			relationToPatient = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT);
			relationToPatientValue = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE);		
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);	
			sexAssignedAtBirthValue = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);
			youAreCurrentlyFillingOutInformation = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			grandChild = testDataForFHQ.get(FHQConstants.GRANDCHILD);
			pleaseMakeSureYouHaveCompletedAllChildrenRecords = testDataForFHQ.get(FHQConstants.PLEASE_MAKE_SURE_YOU_HAVE_COMPLETED_ALL_CHILDREN_RECORDS);
			childBasicInformation = testDataForFHQ.get(FHQConstants.CHILD_BASIC_INFORMATION);
			whichBestDescribesThisRelative = testDataForFHQ.get(FHQConstants.WHICH_BEST_DESCRIBES_THIS_RELATIVE);
			whichBestDescribesThisRelativeSelected = testDataForFHQ.get(FHQConstants.WHICH_BEST_DESCRIBES_THIS_RELATIVE_SELECTED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValueAdded = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE_ADDED);
			typeOfBirth = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTHS);
			typeOfBirthValueAdded = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE_ADDED);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);	
			/* RASopathy Form for GrandChild */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);		
			/* Cancer Form for GrandChild */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form for GrandChild */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form for GrandChild */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);		
			/* GrandChild's Child Information */
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHad = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD);
			childBanner = testDataForFHQ.get(FHQConstants.CHILD_BANNER);
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHadSelected = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD_SELECTED);		
			/* Other for GrandChild */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}

		/*  *********** COUSIN FORM ******************* */
		if (sheetName.equals("Cousin")) {
			testDataForFHQ = ExcelReader.excelIntoHashMap(CHARMS_Data_File_Path_Constants.FHQ_SCENARIO_ONE_DATA, sheetName);
			nCIFamilyStudiesHubRASopathies = testDataForFHQ.get(FHQConstants.NCI_FAMILY_STUDIES_HUB_RASOPATHIES);
			weKnowFamiliesComeInDifferentShapesAndSizes = testDataForFHQ.get(FHQConstants.WE_KNOW_FAMILIES_COME_IN_DIFFERENT_SHAPES_AND_SIZES);
			itsOkayNotToKnowInformationAboutSomeOfYourRelatives = testDataForFHQ.get(FHQConstants.ITS_OKAY_NOT_TO_KNOW_INFORMATION_ABOUT_SOME_OF_YOUR_RELATIVES);	
			listView = testDataForFHQ.get(FHQConstants.LIST_VIEW);
			formView = testDataForFHQ.get(FHQConstants.FORM_VIEW);
			cousins = testDataForFHQ.get(FHQConstants.COUSINS);
			addNewCousins = testDataForFHQ.get(FHQConstants.ADD_NEW_COUSINS);
			theBlueHighlightedRowsBanner = testDataForFHQ.get(FHQConstants.THE_BLUE_HIGHLIGHTED_ROWS_BANNER);
			all = testDataForFHQ.get(FHQConstants.ALL);
			relationToPatientCousin = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_COUSIN);
			firstName = testDataForFHQ.get(FHQConstants.FIRST_NAME);
			firstNameValue = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE);
			firstInitialOfLASTName = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME);
			firstInitialOfLASTNameValue = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE);
			parentOfThisRelative = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE);
			parentOfThisRelativeValue = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE_VALUE);	
			vitalStatus = testDataForFHQ.get(FHQConstants.VITAL_STATUS);
			vitalStatusValue = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE);
			yearOfBirth = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH);
			yearOfBirthValue = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE);
			yearOfBirthValueAdded = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_ADDED);
			relationToPatient = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT);
			relationToPatientValue = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE);
			sexAssignedAtBirth = testDataForFHQ.get(FHQConstants.PARTICIPANT_SEX_ASSIGNED_AT_BIRTH);	
			sexAssignedAtBirthValue = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE);
			sexAssignedAtBirthValueAdded = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_ADDED);			
			firstNameValue1 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_1);
			firstInitialOfLASTNameValue1 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_1);
			parentOfThisRelativeValue1 = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE_VALUE_1); 
			vitalStatusValue1 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_1);
			yearOfBirthValue1 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_1);
			relationToPatientValue1 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_1);
			sexAssignedAtBirthValue1 = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_1);		
			firstNameValue2 = testDataForFHQ.get(FHQConstants.FIRST_NAME_VALUE_2);
			firstInitialOfLASTNameValue2 = testDataForFHQ.get(FHQConstants.FIRST_INITIAL_OF_LAST_NAME_VALUE_2);
			parentOfThisRelativeValue2 = testDataForFHQ.get(FHQConstants.PARENT_OF_THIS_RELATIVE_VALUE_2); 
			vitalStatusValue2 = testDataForFHQ.get(FHQConstants.VITAL_STATUS_VALUE_2);
			yearOfBirthValue2 = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_2);
			relationToPatientValue2 = testDataForFHQ.get(FHQConstants.RELATION_TO_PATIENT_VALUE_2);
			sexAssignedAtBirthValue2 = testDataForFHQ.get(FHQConstants.SEX_ASSIGNED_AT_BIRTH_VALUE_2);
			anEstimatedDateIsPreferred = testDataForFHQ.get(FHQConstants.AN_ESTIMATED_DATE_IS_PREFERRED);
			genderIdentity = testDataForFHQ.get(FHQConstants.PARTICIPANT_GENDER_IDENTITY);
			genderIdentityValueAdded = testDataForFHQ.get(FHQConstants.GENDER_IDENTITY_VALUE_ADDED);
			youAreCurrentlyFillingOutInformation = testDataForFHQ.get(FHQConstants.YOU_ARE_CURRENTLY_FILLING_OUT_INFORMATION);
			cousin = testDataForFHQ.get(FHQConstants.COUSIN);
			cousinBanner = testDataForFHQ.get(FHQConstants.COUSIN_BANNER);
			pleaseMakeSureYouHaveCompletedAllPartnerRecordsBeforeCompletingChildrenRecords = testDataForFHQ.get(FHQConstants.PLEASE_MAKE_SURE_YOU_HAVE_COMPLETED_ALL_PARTNER_RECORDS_BEFORE_COMPLETING_CHILDREN_RECORDS);
			childBasicInformation = testDataForFHQ.get(FHQConstants.CHILD_BASIC_INFORMATION);
			whichBestDescribesThisRelative = testDataForFHQ.get(FHQConstants.WHICH_BEST_DESCRIBES_THIS_RELATIVE);
			whichBestDescribesThisRelativeSelected = testDataForFHQ.get(FHQConstants.WHICH_BEST_DESCRIBES_THIS_RELATIVE_SELECTED);
			isThisRelativeATwinOrPartOfAMultipleBirth = testDataForFHQ.get(FHQConstants.IS_THIS_RELATIVE_A_TWIN_OR_PART_OF_A_MULTIPLE_BIRTH);
			twinOrPartOfAMultipleBirthValueAdded = testDataForFHQ.get(FHQConstants.TWIN__OR_PART_OF_A_MULTIPLE_BIRTH_VALUE_ADDED);
			typeOfBirth = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTHS);
			typeOfBirthValueAdded = testDataForFHQ.get(FHQConstants.TYPE_OF_BIRTH_VALUE_ADDED);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirths = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS);
			hasThisRelativeEverHadAnyMiscarriagesOrStillbirthsValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_HAD_ANY_MISCARRIAGES_OR_STILLBIRTHS_VALUE);
			pleaseIdentifyTheNumberOfEachOfTheFollowingPregnancyResults = testDataForFHQ.get(FHQConstants.PLEASE_IDENTIFY_THE_NUMBER_OF_EACH_OF_THE_FOLLOWING_PREGNANCY_RESULTS);
			totalNumberOfMiscarriages = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES);
			lessThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.LESS_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfMiscarriagesValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_MISCARRIAGES_VALUE);
			totalNumberOfStillbirths = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS);
			moreThan20WeeksOfPregnancy = testDataForFHQ.get(FHQConstants.MORE_THAN_20_WEEKS_OF_PREGNANCY);
			totalNumberOfStillbirthsValue = testDataForFHQ.get(FHQConstants.TOTAL_NUMBER_OF_STILLBIRTHS_VALUE);	
			/* RASopathy Form for Cousin */
			medicalHistory = testDataForFHQ.get(FHQConstants.MEDICAL_HISTORY);
			hasThisRelativeBeenDiagnosedWithARASopathy = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY);
			rASopathyHistoryBanner = testDataForFHQ.get(FHQConstants.RASOPATHY_HISTORY_BANNER);
			hasThisRelativeBeenDiagnosedWithARASopathyValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_BEEN_DIAGNOSED_WITH_A_RASOPATHY_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachRASopathyThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_RASOPATHY_THIS_RELATIVE_HAS_HAD);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			add = testDataForFHQ.get(FHQConstants.ADD);
			removeAll = testDataForFHQ.get(FHQConstants.REMOVE_ALL);
			actions = testDataForFHQ.get(FHQConstants.ACTIONS);
			rASopathy = testDataForFHQ.get(FHQConstants.RASOPATHY);
			specifyOtherRASopathy = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosis = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS);
			yearOfDiagnosis = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS);
			yearOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			ageOfDiagnosis = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS);
			ageOfDiagnosisForRasopathySelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_RASOPATHY_SELECTED);
			additionalInformation = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION);
			noDataToDisplay = testDataForFHQ.get(FHQConstants.NO_DATA_TO_DISPLAY);
			addRow= testDataForFHQ.get(FHQConstants.ADD_ROW);
			rASopathyOptionSelected = testDataForFHQ.get(FHQConstants.RASOPATHY_OPTION_SELECTED);
			specifyOtherRASopathySelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_RASOPATHY_SELECTED);
			pleaseProvideTheYearOfDiagnosisOrTheAgeOfDiagnosisSelected = testDataForFHQ.get(FHQConstants.PLEASE_PROVIDE_THE_YEAR_OF_DIAGNOSIS_OR_THE_AGE_OF_DIAGNOSIS_SELECTED);
			additionalInformationAddedForRasopathy = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_RASOPATHY);
			cancel= testDataForFHQ.get(FHQConstants.CANCEL);		
			/* Cancer Form for Cousin */
			hasThisRelativeEverBeenDiagnosedWithCancer = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER);
			hasThisRelativeEverBeenDiagnosedWithCancerValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_CANCER_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachCancerThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_CANCER_THIS_RELATIVE_HAS_HAD);
			cancers = testDataForFHQ.get(FHQConstants.CANCERS);
			cancer = testDataForFHQ.get(FHQConstants.CANCER);
			cancerOptionSelected = testDataForFHQ.get(FHQConstants.CANCER_OPTION_SELECTED);
			specifyOtherCancer = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER);
			specifyOtherCancerSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_CANCER_SELECTED);
			yearOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			ageOfDiagnosisForCancerSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_CANCER_SELECTED);
			additionalInformationAddedForCancer = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_CANCER);		
			/* Benign Tumor Form for Cousin */
			hasThisRelativeEverBeenDiagnosedWithABenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithBenignTumor = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_BENIGN_TUMOR);
			hasThisRelativeEverBeenDiagnosedWithABenignTumorValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_A_BENIGN_TUMOR_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachBenignTumorThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_BENIGN_TUMOR_THIS_RELATIVE_HAS_HAD);
			benignTumor = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR);
			benignTumorOptionSelected = testDataForFHQ.get(FHQConstants.BENIGN_TUMOR_OPTION_SELECTED);
			yearOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			ageOfDiagnosisForBenignTumorSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_BENIGN_TUMOR_SELECTED);
			additionalInformationAddedForBenignTumor = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_BENIGN_TUMOR);		
			/* Medical Condition Form for Cousin */
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelow = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW);
			medicalConditionsBanner = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS_BANNER);
			hasThisRelativeEverBeenDiagnosedWithAnyOfTheMedicalConditionsListedBelowValue = testDataForFHQ.get(FHQConstants.HAS_THIS_RELATIVE_EVER_BEEN_DIAGNOSED_WITH_ANY_OF_THE_MEDICAL_CONDITIONS_LISTED_BELOW_VALUE);
			pleaseSelectTheAddButtonBelowToAddEachMedicalConditionThisRelativeHasHad = testDataForFHQ.get(FHQConstants.PLEASE_SELECT_THE_ADD_BUTTON_BELOW_TO_ADD_EACH_MEDICAL_CONDITION_THIS_RELATIVE_HAS_HAD);
			medicalConditions = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITIONS);
			medicalCondition = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION);
			medicalConditionOptionSelected = testDataForFHQ.get(FHQConstants.MEDICAL_CONDITION_OPTION_SELECTED);
			specifyMedicalCondition = testDataForFHQ.get(FHQConstants.SPECIFY_MEDICAL_CONDITION);
			specifyOtherMedicalConditionSelected = testDataForFHQ.get(FHQConstants.SPECIFY_OTHER_MEDICAL_CONDITION_SELECTED);
			yearOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.YEAR_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			ageOfDiagnosisForMedicalConditionSelected = testDataForFHQ.get(FHQConstants.AGE_OF_DIAGNOSIS_FOR_MEDICAL_CONDITION_SELECTED);
			additionalInformationAddedForMedicalCondition = testDataForFHQ.get(FHQConstants.ADDITIONAL_INFORMATION_ADDED_FOR_MEDICAL_CONDITION);		
			/* Cousin's Child Information */
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHad = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD);
			childBanner = testDataForFHQ.get(FHQConstants.CHILD_BANNER);
			howManyTotalChildrenAliveAndDeceasedHasThisRelaiveHadSelected = testDataForFHQ.get(FHQConstants.HOW_MANY_TOTAL_CHILDREN_ALIVE_AND_DECEASED_HAS_THIS_RELATIVE_HAD_SELECTED);		
			/* Other for Cousin */
			other = testDataForFHQ.get(FHQConstants.OTHER);
			isThereAnythingElseYouWouldLikeUsToKnowAboutThisRelative = testDataForFHQ.get(FHQConstants.IS_THERE_ANYTHING_ELSE_YOU_WOULD_LIKE_US_TO_KNOW_ABOUT_THIS_RELATIVE);
			addAdditionalInformation = testDataForFHQ.get(FHQConstants.ADD_ADDITIONAL_INFORMATION);
			youWillNotBeAbleToModifyThisRecordAfterYouComplete = testDataForFHQ.get(FHQConstants.YOU_WILL_NOT_BE_ABLE_TO_MODIFY_THIS_RECORD_AFTER_YOU_COMPLETE);
			complete = testDataForFHQ.get(FHQConstants.COMPLETE);
			participationStatus = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS);
			participationStatusValue = testDataForFHQ.get(FHQConstants.PARTICIPATION_STATUS_VALUE);
			yearOfBirthValueNV = testDataForFHQ.get(FHQConstants.YEAR_OF_BIRTH_VALUE_NV);
		}
	}
}


package ServiceNow.CHARMS.Playwright.StepsImplementation.FanconiStudy;

import ServiceNow.CHARMS.Playwright.Pages.FanconiStudy.FanconiSurveyPage;
import appsCommon.PlaywrightUtils.Playwright_ServiceNow_Common_Methods;
import com.microsoft.playwright.FrameLocator;
import com.microsoft.playwright.Locator;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.options.AriaRole;
import com.nci.automation.utils.CucumberLogUtils;
import com.nci.automation.web.CommonUtils;
import com.nci.automation.web.PlaywrightUtils;
import com.nci.automation.web.TestProperties;
import java.nio.file.Paths;
import java.util.regex.Pattern;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class FanconiSurveyStepsImpl {

    /** Method to Reset Fanconi Screener and Survey accounts method to Fanconi Survey */
    public static void resetFanconiScreenerAndSurveyAccount(){
        Playwright_ServiceNow_Common_Methods.side_Door_Test_Account_Login();
        resetFanconiSurvey();
        resetFanconiScreener();
    }

    /** Method to fill Fanconi Screener */
    public static void fillFanconiScreener() {
        var page = PlaywrightUtils.page;
        page.navigate(TestProperties.FANCONI_TEST_URL);
        CommonUtils.sleep(300);
        page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("login")).click();
        page.getByLabel("Username").fill(FanconiSurveyPage.EMAIL);
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Next")).click();
        page.getByLabel("Password").fill(FanconiSurveyPage.PASSWORD_VALUE);
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Verify")).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Agree"))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Agree")).click();
        assertThat(page.locator("a").filter(new Locator.FilterOptions().setHasText("Eligibility Questionnaire"))).isVisible();
        Page page1 = page.waitForPopup(() -> {
            page.locator("a").filter(new Locator.FilterOptions().setHasText("Eligibility Questionnaire")).click();});
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.getByText("Yes, I am completing this").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("First name").click();
        page1.getByLabel("First name").fill(FanconiSurveyPage.PARTICIPANT_FIRST_NAME );
        page1.getByLabel("Middle initial").click();
        page1.getByLabel("Middle initial").fill(FanconiSurveyPage.PARTICIPANT_MIDDLE_INITIAL);
        page1.getByLabel("Last name").click();
        page1.getByLabel("Last name").click();
        page1.getByLabel("Last name").fill(FanconiSurveyPage.PARTICIPANT_LAST_NAME);
        page1.getByLabel("Next →").click();
        page1.getByLabel("First name").click();
        page1.getByLabel("First name").fill(FanconiSurveyPage.PROXY_FIRST_NAME);
        page1.getByLabel("Middle initial").click();
        page1.getByLabel("Middle initial").fill(FanconiSurveyPage.PROXY_MIDDLE_INITIAL);
        page1.getByLabel("Last name").click();
        page1.getByLabel("Last name").fill(FanconiSurveyPage.PROXY_LAST_NAME);
        page1.getByLabel("Next →").click();
        page1.locator("#QID4-8-label").click();
        page1.getByRole(AriaRole.TEXTBOX, new Page.GetByRoleOptions().setName("Other")).click();
        page1.getByRole(AriaRole.TEXTBOX, new Page.GetByRoleOptions().setName("Other")).fill("Friend");
        page1.getByLabel("Next →").click();
        page1.locator("#QID5-1-label").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID189-4-label").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Month").selectOption("6");
        page1.getByLabel("Year").click();
        page1.getByLabel("Year").fill("1987");
        page1.getByLabel("Year").press("Enter");
        page1.getByLabel("July 25,").click();
        page1.getByLabel("Next →").click();
        page1.getByText("Female").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID11-2-label").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("In which country does").selectOption("187");
        page1.getByLabel("Next →").click();
        page1.getByLabel("Street", new Page.GetByLabelOptions().setExact(true)).click();
        page1.getByLabel("Street", new Page.GetByLabelOptions().setExact(true)).fill("Street");
        page1.getByLabel("City").click();
        page1.getByLabel("City").fill("City Test");
        page1.getByLabel("State (Abbreviation)").click();
        page1.getByLabel("State (Abbreviation)").fill("MD");
        page1.getByLabel("Zip Code").click();
        page1.getByLabel("Zip Code").fill("20167");
        page1.getByLabel("Next →").click();
        page1.getByLabel("What is your email address?").click();
        page1.getByLabel("What is your email address?").fill(FanconiSurveyPage.EMAIL);
        page1.getByLabel("Next →").click();
        page1.getByLabel("Please confirm your email").click();
        page1.getByLabel("Please confirm your email").fill(FanconiSurveyPage.EMAIL);
        page1.getByLabel("Next →").click();
        page1.locator("input[name=\"QR\\~QID17\\~4\\~TEXT\"]").click();
        page1.locator("input[name=\"QR\\~QID17\\~4\\~TEXT\"]").fill("240-678-2398");
        page1.getByRole(AriaRole.ROW, new Page.GetByRoleOptions().setName("Home phone number 240-678-")).locator("label").nth(1).click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID18-2-label").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID19-3-label").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID127-2-label").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID32-7-label").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID175-7-label").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID176-7-label").click();
        page1.getByLabel("Next →").click();
        page1.getByRole(AriaRole.ROW, new Page.GetByRoleOptions().setName("A. Low birth weight Yes No")).getByLabel("Yes").nth(1).click();
        page1.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName("C. Short stature No")).getByLabel("No").nth(1).click();
        page1.getByRole(AriaRole.ROW, new Page.GetByRoleOptions().setName("E. Skin abnormalities such as")).getByLabel("Unknown/Unsure").nth(1).click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID178-2-label").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID144-2-label").click();
        page1.getByLabel("Next →").click();
        page1.getByText("Not Applicable").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.getByText("Advertisement").click();
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.locator("#QID193-2-label").click();
        page1.getByLabel("Next →").click();
        page1.locator("span").filter(new Locator.FilterOptions().setHasText("Participate in research")).nth(1).click();
        page1.getByRole(AriaRole.TEXTBOX, new Page.GetByRoleOptions().setName("Participate in research")).click();
        page1.getByRole(AriaRole.TEXTBOX, new Page.GetByRoleOptions().setName("Participate in research")).fill("Test");
        page1.getByLabel("Next →").click();
        page1.getByLabel("Next →").click();
        page1.close();
        page.getByText("CHARMSAutomatedTestOne CHARMSAutomatedTestOne My Family Cohort Study My Profile").click();
        page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Sign Out")).click();
    }

    /** Method to fill Fanconi Consent in NativeView */
    public static void fillFanconiConsent() {
        Playwright_ServiceNow_Common_Methods.side_Door_Test_Account_Login();
        participantDetailsPageLoginInNativeView();
        assertParticipantDetailsPageFieldsInNativeView();
        makeParticipantEligibleInNativeView();
        assertConsentPageDataInNativeView();
        addConsentDataForCallCompleteInNativeView();
        uploadConsentPDFInNativeView();
        completeConsentInNativeView();
    }

    /** Method to Reset Fanconi Screener */
    public static void resetFanconiScreener() {
        var page = PlaywrightUtils.page;
        page.navigate("https://service-test.nci.nih.gov/now/nav/ui/classic/params/target/sys_script_fix.do%3Fsys_id%3D1748a661875c16507e87a8a60cbb35e9%26sysparm_record_target%3Dsys_script_fix%26sysparm_record_row%3D14%26sysparm_record_rows%3D1283%26sysparm_record_list%3DORDERBYDESCsys_updated_on");
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"section_head_right\\.e3dbd323bf3220001875647fcf0739c2\"]").getByRole(AriaRole.BUTTON, new Locator.GetByRoleOptions().setName("Run Fix Script")).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.BUTTON, new FrameLocator.GetByRoleOptions().setName("Proceed in Background")).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.BUTTON, new FrameLocator.GetByRoleOptions().setName("Close").setExact(true)).click();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("CBIIT Test Account: available")).click();
        page.getByRole(AriaRole.MENUITEM, new Page.GetByRoleOptions().setName("Log out")).click();
    }

    /** Method to Reset Fanconi Screener */
    public static void resetFanconiSurvey() {
        var page = PlaywrightUtils.page;
        page.navigate("https://service-test.nci.nih.gov/now/nav/ui/classic/params/target/sys_script_fix.do%3Fsys_id%3D5de132b887f116507e87a8a60cbb35da%26sysparm_record_target%3Dsys_script_fix%26sysparm_record_row%3D7%26sysparm_record_rows%3D1292%26sysparm_record_list%3DORDERBYDESCsys_updated_on");
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"section_head_right\\.e3dbd323bf3220001875647fcf0739c2\"]").getByRole(AriaRole.BUTTON, new Locator.GetByRoleOptions().setName("Run Fix Script")).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.BUTTON, new FrameLocator.GetByRoleOptions().setName("Proceed in Background")).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.BUTTON, new FrameLocator.GetByRoleOptions().setName("Close").setExact(true)).click();
    }

    /** Method to log in to Participant details page in NativeView */
    public static void participantDetailsPageLoginInNativeView(){
        var page = PlaywrightUtils.page;
        page.getByPlaceholder("Filter").click();
        page.getByPlaceholder("Filter").fill("All participant Details");
        CommonUtils.sleep(300);
        page.getByText("All Results").click();
        page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("All Participant Details").setExact(true)).click();
        CommonUtils.sleep(300);
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Search column: name").click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Search column: name").fill("Participant First Name PL");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Search column: name").press("Enter");
        CommonUtils.sleep(300);
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Preview record: Participant").click();
        CommonUtils.sleep(300);
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.LINK, new FrameLocator.GetByRoleOptions().setName("Open Record").setExact(true)).click();
        CommonUtils.sleep(400);
    }

    /** Method to assert Participant Details Page Fields in NativeView */
    public static void assertParticipantDetailsPageFieldsInNativeView() {
        var page = PlaywrightUtils.page;
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByText("Subject ID")).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.TEXTBOX, new FrameLocator.GetByRoleOptions().setName("Subject ID"))).isEmpty();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByText("Name")).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.TEXTBOX, new FrameLocator.GetByRoleOptions().setName("Name").setExact(true))).hasValue("Participant First Name PL");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByText("Permission to contact")).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByLabel("Permission to contact")).hasValue("Unknown");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByText("FHQ Patient")).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("FHQ Patient", new FrameLocator.GetByLabelOptions().setExact(true))).isEmpty();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByText("Eligibility Status")).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByLabel("Eligibility Status")).hasValue("waiting_for_eligibility");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByText("Enrollment Status")).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByLabel("Enrollment Status")).hasValue("1");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByText("Studies", new FrameLocator.GetByTextOptions().setExact(true))).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByText("NIH MRN number", new FrameLocator.GetByTextOptions().setExact(true))).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("NIH MRN number")).isEmpty();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByText("NIH MRN number should include")).isVisible();
    }

    /** Method to make Participant Eligible in NativeView */
    public static void makeParticipantEligibleInNativeView() {
        var page = PlaywrightUtils.page;
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("#study_panel_review")).isVisible();
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("#study_panel_review").click();
        CommonUtils.sleep(400);
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("#mark_eligible")).isVisible();
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("#mark_eligible").click();
        CommonUtils.sleep(400);
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByLabel("Eligibility Status")).hasValue("eligible");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Details form").getByLabel("Enrollment Status")).hasValue("5");
    }

    /** Method to assert Consent page data fields in NativeView */
    public static void assertConsentPageDataInNativeView() {
        var page = PlaywrightUtils.page;
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("#tabs2_list").getByText("Consents (1)").click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("(empty) - Open record:").click();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.participant_study\"]")).hasText("Participant Study");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Study", new FrameLocator.GetByLabelOptions().setExact(true))).hasValue("Participant First Name PL");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.consent_call_scheduled_time\"]")).hasText("Consent call scheduled time");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.consent_call_date\"]")).hasText("Consent Call Date");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent Call Date")).isEmpty();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.participant_study\\.cohort\"]")).hasText("Cohort");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Cohort")).hasValue("field");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.consent_form\"]")).hasText("Consent Form");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent Form", new FrameLocator.GetByLabelOptions().setExact(true))).hasText("-- None --ClinicalField");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.response_type\"]")).hasText("Collection Method");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent form section").getByLabel("Collection Method")).hasText("-- None --Participant upload to portalMail/Fax/Email/OtheriMed");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.consent_version\"]")).hasText("Consent Version");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent Version")).isEmpty();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.participant_response\"]")).hasText("Consent/Assent Status");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent/Assent Status")).hasValue("1");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.consent_type\"]")).hasText("Consent/Assent Category");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent form section").getByLabel("Consent/Assent Category")).hasValue("5");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.assigned_to\"]")).hasText("Assigned to");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Assigned to", new FrameLocator.GetByLabelOptions().setExact(true))).isEmpty();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.status\"]")).hasText("Consent Status");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent form section").getByLabel("Consent Status")).hasValue("1");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.consent_date\"]")).hasText("Consent Date");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.consent_by\"]")).hasText("Consent By");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.SEARCHBOX, new FrameLocator.GetByRoleOptions().setName("Consent By"))).isEmpty();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.current_previous\"]")).hasText("Current/Previous");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Current/Previous")).hasValue("1");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.study\"]")).hasText("Study");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Study", new FrameLocator.GetByLabelOptions().setExact(true))).hasValue("Fanconi");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.future_use_of_specimens_and_data_by_nih\"]")).hasText("Future Use of Specimens and Data by NIH");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use of Specimens and")).hasText("-- None --Dead End by PIDead End by Study ManagerNoYes");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.future_use_by_collaborators\"]")).hasText("Future Use by Collaborators");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use by Collaborators")).hasText("-- None --Dead End by PIDead End by Study ManagerNoYes");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.future_identifiable_use_by_collaborators\"]")).hasText("Future Identifiable Use by Collaborators");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Identifiable Use by")).hasText("-- None --Dead End by PIDead End by Study MangerNoYes");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.return_of_genetic_findings\"]")).hasText("Return of Genetic Findings");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Return of Genetic Findings")).hasValue("1");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.sys_created_on\"]")).hasText("Created");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"label\\.x_naci_family_coho_fcsms_consent\\.send_to_medidata\"]")).hasText("Sent to Medidata");
    }

    /** Method to add the Consent data before Call Complete is clicked Fanconi Consent */
    public static void addConsentDataForCallCompleteInNativeView() {
        var page = PlaywrightUtils.page;
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.BUTTON, new FrameLocator.GetByRoleOptions().setName("Select Consent call scheduled")).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Go to Today", new FrameLocator.GetByLabelOptions().setExact(true)).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Save (Enter)").click();
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"x_naci_family_coho_fcsms_consent\\.consent_call_date\\.ui_policy_sensitive\"]").click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Go to Today", new FrameLocator.GetByLabelOptions().setExact(true)).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent Form", new FrameLocator.GetByLabelOptions().setExact(true)).selectOption("2");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent form section").getByLabel("Collection Method").selectOption("2");
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"x_naci_family_coho_fcsms_consent\\.consent_version\\.ui_policy_sensitive\"]").click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Go to Today", new FrameLocator.GetByLabelOptions().setExact(true)).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Copy of Consent/Assent").selectOption("1");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Protocol Discussed in Private").selectOption("1");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Participant Verbalized").selectOption("1");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Questions Addressed Before").selectOption("1");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent/Assent Obtained").selectOption("1");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Copy of Signed/Dated Consent/").selectOption("1");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Interpreter used?").selectOption("1");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Interpreter Name or ID").click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Interpreter Name or ID").fill("Interpreter Test");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Interpreter Language").click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Interpreter Language").fill("Spanish");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Interpreter Witness?").selectOption("1");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Interpreter Signed").selectOption("1");
      //  page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"x_naci_family_coho_fcsms_consent\\.form_header\"]").getByRole(AriaRole.BUTTON, new Locator.GetByRoleOptions().setName("Save")).click();
        CommonUtils.sleep(300);
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("#call_complete").click();
        CommonUtils.sleep(400);
    }

    /** Method to upload the Consent Pdf to Fanconi Consent */
    public static void uploadConsentPDFInNativeView() {
        var page = PlaywrightUtils.page;
        String consentPDF = System.getProperty("user.dir")+ "/src/test/java/ServiceNow/CHARMS/Resources/Family Cohort Study Consent.pdf";
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("#add_attachment").click();
        CommonUtils.sleep(2000);
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("input[aria-hidden=\"true\"][id=\"attachFile\"]").setInputFiles(Paths.get(consentPDF));
        CommonUtils.sleep(2000);
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Close", new FrameLocator.GetByLabelOptions().setExact(true)).click();
        CommonUtils.sleep(400);
    }

    /** Method to Complete Consent to */
    public static void completeConsentInNativeView() {
        var page = PlaywrightUtils.page;
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("#hard_consent_received").click();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Consent form section").getByLabel("Consent Status")).hasValue("7");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use of Specimens and")).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use of Specimens and")).containsText("-- None --Dead End by PIDead End by Study ManagerNoYes");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use of Specimens and")).isVisible();
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use of Specimens and")).containsText("-- None --Dead End by PIDead End by Study ManagerNoYes");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use of Specimens and").selectOption("2");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use by Collaborators")).containsText("-- None --Dead End by PIDead End by Study ManagerNoYes");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Use by Collaborators").selectOption("2");
        assertThat(page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Identifiable Use by")).containsText("-- None --Dead End by PIDead End by Study MangerNoYes");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Future Identifiable Use by").selectOption("2");
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("[id=\"x_naci_family_coho_fcsms_consent\\.consent_date\\.ui_policy_sensitive\"]").click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByLabel("Go to Today", new FrameLocator.GetByLabelOptions().setExact(true)).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.SEARCHBOX, new FrameLocator.GetByRoleOptions().setName("Mandatory - must be populated")).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.COMBOBOX, new FrameLocator.GetByRoleOptions().setName("Mandatory - must be populated")).click();
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.COMBOBOX, new FrameLocator.GetByRoleOptions().setName("Mandatory - must be populated")).fill("Renne Gray");
        page.frameLocator("iframe[name=\"gsft_main\"]").getByRole(AriaRole.COMBOBOX, new FrameLocator.GetByRoleOptions().setName("Mandatory - must be populated")).press("Enter");
        page.frameLocator("iframe[name=\"gsft_main\"]").locator("#complete_consent").click();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("CBIIT Test Account: available")).click();
        page.getByRole(AriaRole.MENUITEM, new Page.GetByRoleOptions().setName("Log out")).click();
        CommonUtils.sleep(400);
    }

    /** Login method to Fanconi Survey */
    public static void loginFanconiSurvey() {
        var page = PlaywrightUtils.page;
        page.navigate(TestProperties.FANCONI_TEST_URL);
        page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(FanconiSurveyPage.LOGIN_BUTTON_LINK)).click();
        CommonUtils.sleep(2000);
      //  page.getByLabel(FanconiSurveyPage.USERNAME).fill(FanconiSurveyPage.EMAIL);
     //   page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.NEXT)).click();
        page.getByLabel(FanconiSurveyPage.PASSWORD).fill(FanconiSurveyPage.USER_PASSWORD);
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.VERIFY)).click();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.AGREE)).click();
        assertThat(page.getByText(FanconiSurveyPage.NCI_FAMILY_STUDIES_HUB)).hasText(FanconiSurveyPage.NCI_FAMILY_STUDIES_HUB);
        assertThat(page.getByText(FanconiSurveyPage.PLEASE_COMPLETE_THE_AVAILABLE)).hasText(FanconiSurveyPage.PLEASE_COMPLETE_THE_AVAILABLE);
        assertThat(page.getByText(FanconiSurveyPage.PLEASE_COMPLETE_THE_AVAILABLE)).hasText(FanconiSurveyPage.PLEASE_COMPLETE_THE_AVAILABLE);
        assertThat(page.getByText(FanconiSurveyPage.ELIGIBILITY_QUESTIONNAIRE).first()).hasText(FanconiSurveyPage.ELIGIBILITY_QUESTIONNAIRE);
        assertThat(page.locator(FanconiSurveyPage.SELECTOR).filter(new Locator.FilterOptions().setHasText(FanconiSurveyPage.FANCONI_STUDY_SURVEY))).hasText(FanconiSurveyPage.FANCONI_STUDY_SURVEY);
        assertThat(page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(FanconiSurveyPage.UPLOAD_ATTACHMENT))).hasText(FanconiSurveyPage.UPLOAD_ATTACHMENT);
        assertThat(page.getByText(FanconiSurveyPage.IF_YOU_HAVE_ANY_QUESTIONS)).hasText(FanconiSurveyPage.IF_YOU_HAVE_ANY_QUESTIONS);
        page.locator(FanconiSurveyPage.SELECTOR).filter(new Locator.FilterOptions().setHasText(FanconiSurveyPage.FANCONI_STUDY_SURVEY)).click();
        assertThat(page.getByRole(AriaRole.BANNER)).containsText(FanconiSurveyPage.NCI_FAMILY_STUDIES_HUB_FANCONI_CANCER);
        assertThat(page.getByText(FanconiSurveyPage.THANK_YOU_FOR_STARTING)).hasText(FanconiSurveyPage.THANK_YOU_FOR_STARTING);
        assertThat(page.getByText(FanconiSurveyPage.THIS_IS_A_STUDY)).hasText(FanconiSurveyPage.THIS_IS_A_STUDY);
        assertThat(page.getByText(FanconiSurveyPage.THIS_QUESTIONNAIRE_MAY_TAKE)).hasText(FanconiSurveyPage.THIS_QUESTIONNAIRE_MAY_TAKE);
        assertThat(page.getByText(FanconiSurveyPage.NOTE_THE_STUDY_TEAM_REQUESTS)).hasText(FanconiSurveyPage.NOTE_THE_STUDY_TEAM_REQUESTS);
        assertThat(page.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SURVEY_SECTIONS))).hasText(FanconiSurveyPage.SURVEY_SECTIONS);
        assertThat(page.getByLabel(FanconiSurveyPage.BACKGROUND_INFORMATION).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.BACKGROUND_INFORMATION);
        assertThat(page.getByLabel(FanconiSurveyPage.DEMOGRAPHICS).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.DEMOGRAPHICS);
        assertThat(page.getByLabel(FanconiSurveyPage.MEDICAL_HISTORY, new Page.GetByLabelOptions().setExact(true)).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.MEDICAL_HISTORY);
        assertThat(page.getByLabel(FanconiSurveyPage.MEDICAL_HISTORY_CONTINUED).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.MEDICAL_HISTORY_CONTINUED);
        assertThat(page.getByLabel(FanconiSurveyPage.REPRODUCTIVE_HISTORY).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.REPRODUCTIVE_HISTORY);
        assertThat(page.getByLabel(FanconiSurveyPage.SURGICAL_MEDICATION_AND_OTHER_MEDICAL_HISTORY).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.SURGICAL_MEDICATION_AND_OTHER_MEDICAL_HISTORY);
        assertThat(page.getByLabel(FanconiSurveyPage.SEXUAL_HISTORY).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.SEXUAL_HISTORY);
        CucumberLogUtils.playwrightScreenshot(PlaywrightUtils.page);
    }

    /** This method allows the submissions and assertions of the Demographic section of the Fanconi Survey for scenario1.*/
    public static void demographicSectionScenario1() {
        var page = PlaywrightUtils.page;
        assertThat(page.getByLabel(FanconiSurveyPage.BACKGROUND_INFORMATION)).hasText(FanconiSurveyPage.BACKGROUND_INFORMATION);
        assertThat(page.getByLabel(FanconiSurveyPage.DEMOGRAPHICS).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.DEMOGRAPHICS);
        assertThat(page.getByLabel(FanconiSurveyPage.DEMOGRAPHICS)).isEnabled();
        page.getByLabel(FanconiSurveyPage.DEMOGRAPHICS).click();
        assertThat(page.getByLabel(FanconiSurveyPage.PAGE_BREADCRUMBS).getByRole(AriaRole.LINK)).containsText(FanconiSurveyPage.HOME);
        assertThat(page.getByLabel(FanconiSurveyPage.PAGE_BREADCRUMBS).getByRole(AriaRole.LIST)).containsText(FanconiSurveyPage.DEMOGRAPHICS);
        assertThat(page.locator(FanconiSurveyPage.H_2)).hasText(FanconiSurveyPage.DEMOGRAPHICS);
        assertThat(page.getByLabel(FanconiSurveyPage.FORM, new Page.GetByLabelOptions().setExact(true))).containsText(FanconiSurveyPage.INDICATES_REQUIRED);
        assertThat(page.locator(FanconiSurveyPage.FA_DEMOGRAPHICS_HEADER_1)).containsText(FanconiSurveyPage.NEXT_BLOCK_OF_QUESTIONS_WILL_COLLECT_BASIC_DEMOGRAPHIC_INFORMATION);
        assertThat(page.locator(FanconiSurveyPage.FA_DEMOGRAPHICS_HEADER_1)).containsText(FanconiSurveyPage.PLEASE_RESPOND_FROM_THE_PERSPECTIVE_OF_THE_PARTICIPANT);
        assertThat(page.locator(FanconiSurveyPage.FA_BIO_MOTHER_LABEL)).containsText(FanconiSurveyPage.BIOLOGICAL_MOTHER_S_INFORMATION);
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_ETHNICITY)).containsText(FanconiSurveyPage.WHAT_IS_YOUR_THE_PARTICIPANT_S_BIOLOGICAL_MOTHER_S_ETHNICITY);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MOTHER_ETHNICITY_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.MOTHER_ETHNICITY_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHERS_RACE)).containsText(FanconiSurveyPage.WHAT_IS_YOUR_THE_PARTICIPANT_S_BIOLOGICAL_MOTHER_S_RACE);
        page.locator(FanconiSurveyPage.ID_AUTOGEN_3).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.MOTHERS_RACE_ENTERED)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_BIO_FATHER_LABEL)).containsText(FanconiSurveyPage.BIOLOGICAL_FATHER_S_INFORMATION);
        assertThat(page.locator(FanconiSurveyPage.FA_FATHERS_ETHNICITY)).containsText(FanconiSurveyPage.WHAT_IS_YOUR_THE_PARTICIPANT_S_BIOLOGICAL_FATHER_S_ETHNICITY);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_FATHERS_ETHNICITY_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FATHER_ETHNICITY_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FATHERS_RACE)).containsText(FanconiSurveyPage.WHAT_IS_YOUR_THE_PARTICIPANT_S_BIOLOGICAL_FATHER_S_RACE);
        page.locator(FanconiSurveyPage.ID_AUTOGEN_4).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FATHERS_RACE_ENTERED).setExact(true)).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT)).click();
        CommonUtils.sleep(500);
    }

    /** This method allows the submissions and assertions of the Medical History section of the Fanconi Survey for scenario1.*/
    public static void medicalHistorySectionScenario1() {
        var page = PlaywrightUtils.page;
        assertThat(page.getByLabel(FanconiSurveyPage.BACKGROUND_INFORMATION)).hasText(FanconiSurveyPage.BACKGROUND_INFORMATION);
        assertThat(page.getByLabel(FanconiSurveyPage.DEMOGRAPHICS).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.DEMOGRAPHICS);
        assertThat(page.getByLabel(FanconiSurveyPage.MEDICAL_HISTORY, new Page.GetByLabelOptions().setExact(true)).locator(FanconiSurveyPage.SPAN)).hasText(FanconiSurveyPage.MEDICAL_HISTORY);
        page.getByLabel(FanconiSurveyPage.MEDICAL_HISTORY, new Page.GetByLabelOptions().setExact(true)).click();
        assertThat(page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(FanconiSurveyPage.HOME))).isVisible();
        assertThat(page.getByLabel(FanconiSurveyPage.PAGE_BREADCRUMBS).getByText(FanconiSurveyPage.MEDICAL_HISTORY)).isVisible();
        assertThat(page.locator(FanconiSurveyPage.H_2)).hasText(FanconiSurveyPage.MEDICAL_HISTORY);
        assertThat(page.getByLabel(FanconiSurveyPage.FORM, new Page.GetByLabelOptions().setExact(true))).containsText(FanconiSurveyPage.INDICATES_REQUIRED);
        assertThat(page.locator(FanconiSurveyPage.FA_MEDICAL_HISTORY_HEADER_1)).containsText(FanconiSurveyPage.ASKS_YOU_TO_TELL_US_SOME_GENERAL_MEDICAL_HISTORY);
        assertThat(page.locator(FanconiSurveyPage.FA_MEDICAL_HISTORY_HEADER_1)).containsText(FanconiSurveyPage.PLEASE_RESPOND_FROM_THE_PERSPECTIVE_OF_THE_PARTICIPANT);
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_HAD_PRENATAL_TESTS)).containsText(FanconiSurveyPage.MOTHER_HAD_PRENATAL_TESTS_DETAIL);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MOTHER_HAD_PRENATAL_TESTS_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_MRVS_LABEL)).containsText(FanconiSurveyPage.ADD_THE_RESULTS_OF_PRENATAL_TESTS_ADMINISTERED_TO_THE_BIOLOGICAL_MOTHER);
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS)).containsText(FanconiSurveyPage.PRENATAL_TEST_RESULT_DETAILS);
        assertThat(page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_PRENATAL_TEST)).isVisible();
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS).getByText(FanconiSurveyPage.ADD_REMOVE_ALL)).isVisible();
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS)).containsText(FanconiSurveyPage.ACTIONS);
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS)).containsText(FanconiSurveyPage.PRENATAL_TEST);
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS)).containsText(FanconiSurveyPage.OTHER_PRENATAL_TEST_PLEASE_SPECIFY);
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS)).containsText(FanconiSurveyPage.TEST_RESULT);
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS)).containsText(FanconiSurveyPage.NO_DATA_TO_DISPLAY);
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_PRENATAL_TEST).click();
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST)).containsText(FanconiSurveyPage.PRENATAL_TEST);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_PRENATAL_TEST_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_PRENATAL_TEST_ENTERED)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_TEST_RESULT)).containsText(FanconiSurveyPage.TEST_RESULT);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_TEST_RESULT_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_TEST_RESULT_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.MRVS_ACTIVE_ROW)).containsText(FanconiSurveyPage.CANCEL);
        assertThat(page.locator(FanconiSurveyPage.MRVS_SAVE_BUTTON)).containsText(FanconiSurveyPage.ADD);
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS)).containsText(FanconiSurveyPage.FA_PRENATAL_TEST_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_PRENATAL_TEST_RESULT_MRVS)).containsText(FanconiSurveyPage.FA_TEST_RESULT_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_PREGNANCY_COMPLICATIONS)).containsText(FanconiSurveyPage.FA_MOTHER_PREGNANCY_COMPLICATIONS_DETAIL);
        page.locator(FanconiSurveyPage.ID_AUTOGEN_16).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.BIOLOGICAL_MOTHER_HAD_NO)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_TAKEN_PREGNANCY_MEDICATION)).containsText(FanconiSurveyPage.FA_MOTHER_TAKEN_PREGNANCY_MEDICATION_DETAIL);
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_TAKEN_PREGNANCY_MEDICATION)).containsText(FanconiSurveyPage.FA_MOTHER_TAKEN_PREGNANCY_MEDICATION_HELPTEXT);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MOTHER_TAKEN_PREGNANCY_MEDICATION_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MEDICATION_MRVS_LABEL)).containsText(FanconiSurveyPage.FA_MEDICATION_MRVS_LABEL_DETAIL);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.PREGNANCY_MEDICATION_DETAILS);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.ADD_REMOVE_ALL);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.ACTIONS);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.TYPE_OF_MEDICATION);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.OTHER_MEDICATION_TYPE_PLEASE_SPECIFY);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.MEDICATION_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.REASON_MEDICATION_PRESCRIBED);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.LENGTH_OF_TIME_MEDICATION_WAS_TAKEN_DURING_PREGNANCY);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.NO_DATA_TO_DISPLAY);
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_PREGNANCY).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MEDICATION_TYPE)).containsText(FanconiSurveyPage.TYPE_OF_MEDICATION);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MEDICATION_TYPE_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ANTIBIOTICS)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MEDICATION_NAME)).containsText(FanconiSurveyPage.MEDICATION_NAME);
        assertThat(page.getByLabel(FanconiSurveyPage.PREGNANCY_MEDICATION_DETAILS, new Page.GetByLabelOptions().setExact(true)).locator(FanconiSurveyPage.SP_HELP_TAG)).hasText("Generic or brand name is OK");
        page.getByLabel(FanconiSurveyPage.MEDICATION_NAME, new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel(FanconiSurveyPage.MEDICATION_NAME, new Page.GetByLabelOptions().setExact(true)).fill(FanconiSurveyPage.GENERIC_MEDICATION_TEST_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_REASON_PRESCRIBED)).containsText(FanconiSurveyPage.REASON_MEDICATION_PRESCRIBED);
        page.getByLabel(FanconiSurveyPage.REASON_MEDICATION_PRESCRIBED).click();
        page.getByLabel(FanconiSurveyPage.REASON_MEDICATION_PRESCRIBED).fill(FanconiSurveyPage.REASON_MEDICATION_PRESCRIBED_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_LENGTH_OF_TIME_MEDICATION_TAKEN_DURING_PREGNANCY)).containsText(FanconiSurveyPage.LENGTH_OF_TIME_MEDICATION_WAS_TAKEN_DURING_PREGNANCY);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_LENGTH_OF_TIME_MEDICATION_TAKEN_DURING_PREGNANCY_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_LENGTH_OF_TIME_MEDICATION_TAKEN_DURING_PREGNANCY_ENTERED).setExact(true)).click();
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_LENGTH_OF_TIME_IN_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.DAYS)).click();
        assertThat(page.locator(FanconiSurveyPage.MRVS_ACTIVE_ROW)).containsText(FanconiSurveyPage.CANCEL);
        assertThat(page.locator(FanconiSurveyPage.MRVS_SAVE_BUTTON)).containsText(FanconiSurveyPage.ADD);
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.ANTIBIOTICS);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.GENERIC_MEDICATION_TEST_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.REASON_MEDICATION_PRESCRIBED_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.FA_LENGTH_OF_TIME_MEDICATION_TAKEN_DURING_PREGNANCY_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_PREGNANCY_MEDICATION_MRVS)).containsText(FanconiSurveyPage.DAYS);
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_PREGNANCY_LENGTH_IN_WEEKS)).containsText(FanconiSurveyPage.FA_MOTHER_PREGNANCY_LENGTH_IN_WEEKS_DETAIL);
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_PREGNANCY_LENGTH_IN_WEEKS)).containsText(FanconiSurveyPage.FA_MOTHER_PREGNANCY_LENGTH_IN_WEEKS_HELPTEXT);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MOTHER_PREGNANCY_LENGTH_IN_WEEKS_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_MOTHER_PREGNANCY_LENGTH_IN_WEEKS_ENTERED)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_LABOR_INDUCED)).containsText(FanconiSurveyPage.WAS_YOUR_THE_PARTICIPANT_S_BIOLOGICAL_MOTHER_S_LABOR_INDUCED);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MOTHER_LABOR_INDUCED_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MOTHER_DELIVERY_METHOD)).containsText(FanconiSurveyPage.HOW_WERE_YOU_THE_PARTICIPANT_DELIVERED);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MOTHER_DELIVERY_METHOD_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_MOTHER_DELIVERY_METHOD_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MEDICAL_COMPLICATION_AT_BIRTH)).containsText(FanconiSurveyPage.FA_MEDICAL_COMPLICATION_AT_BIRTH_DETAIL);
        page.locator(FanconiSurveyPage.ID_AUTOGEN_17).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.BIRTH_DEFECTS_CONGENITAL)).click();
        assertThat(page.locator(FanconiSurveyPage.HOSPITAL_STAY_REQUIRED_AT_BIRTH)).containsText(FanconiSurveyPage.HOSPITAL_STAY_REQUIRED_AT_BIRTH_DETAIL);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_HOSPITAL_STAY_REQUIRED_AT_BIRTH_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_HOSPITAL_STAY_LENGTH_AT_BIRTH)).containsText(FanconiSurveyPage.FA_HOSPITAL_STAY_LENGTH_AT_BIRTH_DETAIL);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_HOSPITAL_STAY_LENGTH_AT_BIRTH_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_HOSPITAL_STAY_LENGTH_AT_BIRTH_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_HOSPITAL_STAY_LENGTH_AT_BIRTH_IN)).containsText(FanconiSurveyPage.TIME_IN);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_HOSPITAL_STAY_LENGTH_AT_BIRTH_IN_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.DAYS)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_LABEL)).containsText(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_LABEL_DETAIL);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.GROWTH_AND_DEVELOPMENT);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.ADD_REMOVE_ALL);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.ACTIONS);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.PLEASE_FILL_IN_THE_AGE_WHEN_YOU_THE_PARTICIPANT_FIRST_WALKED_WITHOUT_HELP);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.TIME_IN);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.PLEASE_FILL_IN_THE_AGE_WHEN_YOU_THE_PARTICIPANT_FIRST_SPOKE_2_3_WORD_SENTENCES);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.TIME_IN);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.PLEASE_FILL_IN_THE_AGE_WHEN_YOU_THE_PARTICIPANT_WERE_TOILET_TRAINED);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.TIME_IN);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.NO_DATA_TO_DISPLAY);
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_GROWTH_AND).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FIRST_WALKED_WITHOUT_HELP_AGE)).containsText(FanconiSurveyPage.PLEASE_FILL_IN_THE_AGE_WHEN_YOU_THE_PARTICIPANT_FIRST_WALKED_WITHOUT_HELP);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_FIRST_WALKED_WITHOUT_HELP_AGE_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_FIRST_WALKED_WITHOUT_HELP_AGE_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_WALKING_WITHOUT_HELP_TIME_MEASUREMENT)).containsText(FanconiSurveyPage.TIME_IN);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_WALKING_WITHOUT_HELP_TIME_MEASUREMENT_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.MONTHS)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FIRST_SPOKE_WORD_SENTENCES_AGE)).containsText(FanconiSurveyPage.PLEASE_FILL_IN_THE_AGE_WHEN_YOU_THE_PARTICIPANT_FIRST_SPOKE_2_3_WORD_SENTENCES);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_FIRST_SPOKE_WORD_SENTENCES_AGE_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_FIRST_SPOKE_WORD_SENTENCES_AGE_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FIRST_SPOKE_WORD_SENTENCES_TIME_MEASUREMENT)).containsText(FanconiSurveyPage.TIME_IN);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_FIRST_SPOKE_WORD_SENTENCES_TIME_MEASUREMENT_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.MONTHS)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_WERE_TOILET_TRAINED_AGE)).containsText(FanconiSurveyPage.PLEASE_FILL_IN_THE_AGE_WHEN_YOU_THE_PARTICIPANT_WERE_TOILET_TRAINED);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_WERE_TOILET_TRAINED_AGE_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_WERE_TOILET_TRAINED_AGE_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_WERE_TOILET_TRAINED_TIME_MEASUREMENT)).containsText(FanconiSurveyPage.TIME_IN);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_WERE_TOILET_TRAINED_TIME_MEASUREMENT_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.MONTHS)).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CANCEL))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.FA_FIRST_WALKED_WITHOUT_HELP_AGE_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.MONTHS);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.FA_FIRST_SPOKE_WORD_SENTENCES_AGE_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.MONTHS);
        assertThat(page.locator(FanconiSurveyPage.FA_GROWTH_AND_DEVELOPMENT_MRVS)).containsText(FanconiSurveyPage.FA_WERE_TOILET_TRAINED_AGE_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_DEVELOPMENT_DELAYED)).containsText(FanconiSurveyPage.TOLD_THAT_YOU_THE_PARTICIPANT_HAD_DELAYED_DEVELOPMENTAL_MILESTONES_OR_SPEECH_DELAY);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_DEVELOPMENT_DELAYED_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_OCCUPATIONAL_THERAPY_RECEIVED)).containsText(FanconiSurveyPage.EVER_RECEIVED_OCCUPATIONAL_PHYSICAL_THERAPY);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_OCCUPATIONAL_THERAPY_RECEIVED_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_SPEECH_THERAPY_RECEIVED)).containsText(FanconiSurveyPage.HAVE_YOU_THE_PARTICIPANT_EVER_RECEIVED_SPEECH_THERAPY);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_SPEECH_THERAPY_RECEIVED_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_COGNITIVE_OR_LEARNING_DELAY)).containsText(FanconiSurveyPage.EVER_TOLD_YOU_THE_PARTICIPANT_HAD_A_COGNITIVE_OR_LEARNING_DELAY);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_COGNITIVE_OR_LEARNING_DELAY_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_IEP_OR_504_PLAN_RECEIVED)).containsText(FanconiSurveyPage.RECEIVED_AN_INDIVIDUALIZED_EDUCATIONAL_PROGRAM_IEP_OR_A_504_PLAN_IN_SCHOOL);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_IEP_OR_504_PLAN_RECEIVED_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FILL_IN_THE_FOLLOWING_TABLE_FOR_EACH_ILLNESS_LISTED_LABEL)).containsText(FanconiSurveyPage.EACH_OF_THE_ILLNESSES_OF_INTEREST_THAT_YOU_THE_PARTICIPANT_HAS_BEEN_DIAGNOSED_WITH);
        assertThat(page.locator(FanconiSurveyPage.FA_FILL_IN_THE_FOLLOWING_TABLE_FOR_EACH_ILLNESS_LISTED_LABEL)).containsText(FanconiSurveyPage.SLAPPED_CHEEK_PAROVIRUS_FREQUENT_EAR_INFECTIONS_MORE_THAN_7_RECURRENT);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.ILLNESS_DETAILS);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.ADD_REMOVE_ALL);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.ACTIONS);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.NAME_OF_ILLNESS);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.OTHER_ILLNESS_PLEASE_SPECIFY);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.WAS_YOUR_THE_PARTICIPANT_S_AGE_WHEN_YOU_THE_PARTICIPANT_HAD_THIS_ILLNESS);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.AGE_IN);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.LIST_ANY_COMPLICATIONS_THAT_YOU_THE_PARTICIPANT_HAD_FROM_THIS_ILLNESS);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.NO_DATA_TO_DISPLAY);
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_ILLNESS_DETAILS).click();
        assertThat(page.locator(FanconiSurveyPage.FA_NAME_OF_ILLNESS)).containsText(FanconiSurveyPage.NAME_OF_ILLNESS);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_NAME_OF_ILLNESS_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_NAME_OF_ILLNESS_ENTERED)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_AGE)).containsText(FanconiSurveyPage.WAS_YOUR_THE_PARTICIPANT_S_AGE_WHEN_YOU_THE_PARTICIPANT_HAD_THIS_ILLNESS);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_ILLNESS_AGE_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_ILLNESS_AGE_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AGE_IN)).containsText(FanconiSurveyPage.AGE_IN);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AGE_IN_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.MONTHS)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_COMPLICATIONS)).containsText(FanconiSurveyPage.LIST_ANY_COMPLICATIONS_THAT_YOU_THE_PARTICIPANT_HAD_FROM_THIS_ILLNESS);
        page.getByLabel(FanconiSurveyPage.LIST_ANY_COMPLICATIONS_THAT).click();
        page.getByLabel(FanconiSurveyPage.LIST_ANY_COMPLICATIONS_THAT).fill(FanconiSurveyPage.TEST_COMPLICATIONS_THAT_THE_PARTICIPANT_HAD_FROM_THIS_ILLNESS);
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CANCEL))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.FA_NAME_OF_ILLNESS_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.FA_ILLNESS_AGE_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.MONTHS);
        assertThat(page.locator(FanconiSurveyPage.FA_ILLNESS_DETAILS_MRVS)).containsText(FanconiSurveyPage.TEST_COMPLICATIONS_THAT_THE_PARTICIPANT_HAD_FROM_THIS_ILLNESS);
        assertThat(page.locator(FanconiSurveyPage.FA_PLEASE_FILL_IN_THE_FOLLOWING_TABLE_FOR_EACH_IMMUNIZATION_VACCINATION_LISTED)).containsText(FanconiSurveyPage.TO_FILL_IN_EACH_IMMUNIZATION_VACCINATION_OF_INTEREST_THAT_YOU_THE_PARTICIPANT_HAS_HAD);
        assertThat(page.locator(FanconiSurveyPage.FA_PLEASE_FILL_IN_THE_FOLLOWING_TABLE_FOR_EACH_IMMUNIZATION_VACCINATION_LISTED)).containsText(FanconiSurveyPage.IMMUNIZATION_VACCINATION_LISTED_HELP_TEXT);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAIL);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.ADD_REMOVE_ALL);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.ACTIONS);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.NAME_OF_IMMUNIZATION_VACCINATION);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.IMMUNIZATIONS_YOU_THE_PARTICIPANT_HAS_RECIVED_SEPARATE_USING_A_COMMA);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.AGE_DID_YOU_THE_PARTICIPANT_RECEIVE_THIS_IMMUNIZATION_VACCINATION);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.AGE_IN);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.PARTICIPANT_COMPLETE_THE_SERIES_NEEDED_FOR_FULL_IMMUNIZATION_VACCINATION);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.NO_DATA_TO_DISPLAY);
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_IMMUNIZATION).click();
        assertThat(page.locator(FanconiSurveyPage.FA_NAME_OF_IMMUNIZATION_VACCINATION)).containsText(FanconiSurveyPage.NAME_OF_IMMUNIZATION_VACCINATION);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_NAME_OF_IMMUNIZATION_VACCINATION_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_NAME_OF_IMMUNIZATION_VACCINATION_ENTERED)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_IMMUNIZATION_VACCINATION_AGE)).containsText(FanconiSurveyPage.AGE_DID_YOU_THE_PARTICIPANT_RECEIVE_THIS_IMMUNIZATION_VACCINATION);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_IMMUNIZATION_VACCINATION_AGE_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_IMMUNIZATION_VACCINATION_AGE_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AGE_MEASUREMENT_RECEIVED_IMMUNIZATION_VACCINATION)).containsText(FanconiSurveyPage.AGE_IN);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AGE_MEASUREMENT_RECEIVED_IMMUNIZATION_VACCINATION_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.MONTHS)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_COMPLETED_FULL_SERIES)).containsText(FanconiSurveyPage.PARTICIPANT_COMPLETE_THE_SERIES_NEEDED_FOR_FULL_IMMUNIZATION_VACCINATION);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_COMPLETED_FULL_SERIES_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CANCEL))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.FA_NAME_OF_IMMUNIZATION_VACCINATION_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.FA_IMMUNIZATION_VACCINATION_AGE_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.MONTHS);
        assertThat(page.locator(FanconiSurveyPage.IMMUNIZATION_VACCINATION_DETAILS)).containsText(FanconiSurveyPage.YES);
        assertThat(page.locator(FanconiSurveyPage.FA_HAS_ALLERGY)).containsText(FanconiSurveyPage.YOU_THE_PARTICIPANT_ALLERGIC_TO_ANY_FOOD_MEDICATION_ANYTHING_ELSE);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_HAS_ALLERGY_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_INDICATE_IN_THE_TABLE_BELOW_ALLERGIES_LABEL)).containsText(FanconiSurveyPage.TO_INDICATE_IF_YOU_THE_PARTICIPANT_HAS_ALLERGIES_TO_THE_LISTED_ITEMS);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.ALLERGY_DETAILS);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.ADD_REMOVE_ALL);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.ACTIONS);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.ALLERGY_TYPE);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.FOOD_ITEM);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.MEDICATION_NAMES);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.OTHER_ITEM);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.REACTION_TO_ITEM_PLEASE_BE_AS_SPECIFIC_AS_POSSIBLE);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.NO_DATA_TO_DISPLAY);
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_ALLERGY_DETAILS).click();
        assertThat(page.locator(FanconiSurveyPage.FA_TRIGGER_ITEM_TYPE)).containsText(FanconiSurveyPage.ALLERGY_TYPE);
        page.getByLabel(FanconiSurveyPage.ALLERGY_DETAILS, new Page.GetByLabelOptions().setExact(true)).locator(FanconiSurveyPage.SELECTOR).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FOOD)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FOOD_ALLERGY)).containsText(FanconiSurveyPage.FOOD_ITEM);
        page.getByLabel(FanconiSurveyPage.FOOD_ITEM).click();
        page.getByLabel(FanconiSurveyPage.FOOD_ITEM).fill(FanconiSurveyPage.FOOD_ITEM_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_REACTION_AFTER_EATING_FOOD_ITEM)).containsText(FanconiSurveyPage.REACTION_TO_ITEM_PLEASE_BE_AS_SPECIFIC_AS_POSSIBLE);
        page.getByLabel(FanconiSurveyPage.REACTION_TO_ITEM_PLEASE_BE).click();
        page.getByLabel(FanconiSurveyPage.REACTION_TO_ITEM_PLEASE_BE).fill(FanconiSurveyPage.REACTION_TO_ITEM_PLEASE_ENTERED);
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CANCEL))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.FOOD);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.FOOD_ITEM_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_ALLERGY_DETAILS_MRVS)).containsText(FanconiSurveyPage.REACTION_TO_ITEM_PLEASE_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_DIAGNOSIS_HEADER)).containsText(FanconiSurveyPage.WILL_ASK_YOU_ABOUT_THE_FANCONI_ANEMIA_DIAGNOSIS);
        assertThat(page.locator(FanconiSurveyPage.FA_PLEASE_FILL_IN_THE_FOLLOWING_TABLE_FOR_FANCONI_ANEMIA)).containsText(FanconiSurveyPage.DIAGNOSIS_OF_FANCONI_ANEMIA_IN_YOU_THE_PARTICIPANT);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.FANCONI_ANEMIA_SIGNS);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.ADD_REMOVE_ALL);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.ACTIONS);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.WHAT_WERE_THE_FIRST_SIGNS_THAT_LED_TO_A_DIAGNOSIS_OF_FANCONI_ANEMIA);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.OTHER_FANCONI_ANEMIA_SIGNS_PLEASE_SPECIFY);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.PLEASE_SELECT_DATE_OR_AGE_FOR_REPORTING);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.MONTH_OF_DIAGNOSIS);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.AGE_OF_DIAGNOSIS);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.YEAR_OF_DIAGNOSIS);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.NO_DATA_TO_DISPLAY);
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_FANCONI_ANEMIA).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FIRST_SIGNS_THAT_LED_TO_DIAGNOSIS_OF_FANCONI_ANEMIA)).containsText(FanconiSurveyPage.WHAT_WERE_THE_FIRST_SIGNS_THAT_LED_TO_A_DIAGNOSIS_OF_FANCONI_ANEMIA);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_FIRST_SIGNS_THAT_LED_TO_DIAGNOSIS_OF_FANCONI_ANEMIA_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.BIRTH_DEFECTS)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_DATE_OR_AGE_WHEN_SIGNS_FIRST_APPEARED)).containsText(FanconiSurveyPage.PLEASE_SELECT_DATE_OR_AGE_FOR_REPORTING);
        assertThat(page.locator(FanconiSurveyPage.FA_DATE_OR_AGE_WHEN_SIGNS_FIRST_APPEARED)).containsText(FanconiSurveyPage.DATE_OR_AGE_WHEN_FANCONI_ANEMIA_SIGNS_FIRST_APPEARED);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_DATE_OR_AGE_WHEN_SIGNS_FIRST_APPEARED_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.DATE)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_MONTH_SIGNS_FIRST_APPEARED)).containsText(FanconiSurveyPage.MONTH_OF_DIAGNOSIS);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MONTH_SIGNS_FIRST_APPEARED_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_MONTH_SIGNS_FIRST_APPEARED_ENTERED)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_YEAR_SIGNS_FIRST_APPEARED)).containsText(FanconiSurveyPage.YEAR_OF_DIAGNOSIS);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_YEAR_SIGNS_FIRST_APPEARED_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_YEAR_SIGNS_FIRST_APPEARED_ENTERED)).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CANCEL))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.BIRTH_DEFECTS);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.DATE);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.FA_MONTH_SIGNS_FIRST_APPEARED_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_FANCONI_ANEMIA_SIGNS)).containsText(FanconiSurveyPage.FA_YEAR_SIGNS_FIRST_APPEARED_ENTERED);
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT)).click();
        CommonUtils.sleep(500);
    }

    /** This method allows the submissions and assertions of the Medical History Continued section of the Fanconi Survey for scenario1.*/
    public static void medicalHistoryContinuedSectionScenario1() {
        var page = PlaywrightUtils.page;
        assertThat(page.getByLabel("Medical History Continued").locator("span")).hasText("Medical History Continued");
        page.getByLabel("Medical History Continued").click();
        assertThat(page.getByRole(AriaRole.BANNER)).containsText("NCI Family Studies Hub: Fanconi Cancer");
        assertThat(page.locator("h2")).hasText("Medical History Continued");
        assertThat(page.getByLabel("Item Details")).containsText("Hematologic findings");
        assertThat(page.getByLabel("form", new Page.GetByLabelOptions().setExact(true))).containsText("Indicates required");
        assertThat(page.locator("#fa_organ_systems_affected_by_fa_header")).containsText("The next few sections ask about the different organ systems in the body that may be affected by Fanconi Anemia.");
        assertThat(page.locator("#fa_blood_bone_marrow_conditions_label")).hasText("Please select the \"Add\" button below to fill in the blood or bone marrow conditions (Hematologic Abnormality) you/the participant may have.");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Blood/Bone Marrow Conditions");
        assertThat(page.getByLabel("Add a row for Blood/Bone")).isVisible();
        assertThat(page.locator("#blood_bone_marrow_conditions").getByText("AddRemove All")).isVisible();
        assertThat(page.getByLabel("Add a row for Blood/Bone")).hasText("Add");
        page.locator("#blood_bone_marrow_conditions").getByRole(AriaRole.COLUMNHEADER, new Locator.GetByRoleOptions().setName("Actions")).click();
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Actions");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Did you/the participant have this hematologic abnormality?");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Anemia Type");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Describe Clone");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Age when you/the participant were diagnosed");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Age in");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("No data to display");
        page.getByLabel("Add a row for Blood/Bone").click();
        assertThat(page.locator("#fa_has_hematologic_abnormality")).containsText("Did you/the participant have this hematologic abnormality?");
        page.locator("#s2id_sp_formfield_fa_has_hematologic_abnormality a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal chromosome clone(s)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Aplastic anemia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Aplastic anemia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Leukemia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low platelets ("))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low red cell count (Anemia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low white cells (Leukopenia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low white cells (Leukopenia"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal chromosome clone(s)")).click();
        assertThat(page.locator("#fa_describe_clone")).containsText("Describe Clone");
        page.getByLabel("Describe Clone", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Describe Clone", new Page.GetByLabelOptions().setExact(true)).fill("Test Clone");
        assertThat(page.locator("#fa_please_fill_in_the_age_when_you_the_participant_were_diagnosed")).containsText("Age when you/the participant were diagnosed");
        page.locator("#s2id_sp_formfield_fa_please_fill_in_the_age_when_you_the_participant_were_diagnosed a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("105"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106")).click();
        assertThat(page.locator("#fa_month_or_year")).containsText("Age in");
        page.locator("#s2id_sp_formfield_fa_month_or_year a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Years"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Years")).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Cancel"))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add"))).isVisible();
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Abnormal chromosome clone(s) in bone marrow. Describe clone");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Test Clone");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("106");
        assertThat(page.locator("#blood_bone_marrow_conditions")).containsText("Years");
        assertThat(page.locator("#fa_blood_count_test_header")).containsText("When did you/the participant last have a complete blood count done? Please select the \"Add\" button below to fill in the details.");
        assertThat(page.locator("#fa_blood_count_test")).containsText("Blood Count Test");
        assertThat(page.getByLabel("Add a row for Blood Count Test")).isVisible();
        assertThat(page.locator("#fa_blood_count_test").getByText("AddRemove All")).isVisible();
        assertThat(page.getByLabel("Add a row for Blood Count Test")).containsText("Add");
        assertThat(page.locator("#fa_blood_count_test")).containsText("AddRemove All");
        assertThat(page.locator("#fa_blood_count_test")).containsText("Actions");
        assertThat(page.locator("#fa_blood_count_test")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_blood_count_test")).containsText("Test Date");
        assertThat(page.locator("#fa_blood_count_test")).containsText("Test Age");
        assertThat(page.locator("#fa_blood_count_test")).containsText("Age In");
        assertThat(page.locator("#fa_blood_count_test")).containsText("No data to display");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("Please fax or mail your/the participant's most recent CBC report by following the instructions below:");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("FAX:");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("If you would like to fax the test results, please fax to: Attention: Fanconi Anemia Study Team");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("Fax Number: 240-276-7836");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("MAIL:");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("If you would like to mail the test results, please send to:");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("NATIONAL CANCER INSTITUTE NIH HHS CLINICAL GENETICS BRANCH DCEG");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("ATTN: FANCONI ANEMIA STUDY");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("9609 MEDICAL CENTER DR RM 6E504 MSC 9772");
        assertThat(page.locator("#fa_fax_mail_result_instructios_header")).containsText("BETHESDA MD 20814-9692");
        assertThat(page.locator("#fa_immunodeficiency_ever_indicated")).containsText("Were you/the participant ever diagnosed with an immunodeficiency?");
        assertThat(page.locator("#fa_immunodeficiency_ever_indicated")).containsText("This applies to a diagnosis of immunodeficiency prior to stem cell transplantation if you/the participant have received a stem cell transplant. (Ex. Low immunoglobulins, poor wound healing, recurrent infections, etc. )");
        page.locator("#s2id_sp_formfield_fa_immunodeficiency_ever_indicated a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_immunodeficiencies")).containsText("Please select which immunodeficiency you/the participant were told you have. Select all that apply");
        page.locator("#s2id_autogen40").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low immunoglobulins"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low lymphocytes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Poor response to vaccines"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Poor response to vaccines"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Poor wound healing"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Recurrent infections"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low immunoglobulins")).click();
        assertThat(page.locator("#fa_infections_recurrent")).containsText("Did you/the participant have recurrent infections in the past 3 months or an infection lasting for more than 7-10 days within the past month?");
        page.locator("#s2id_sp_formfield_fa_infections_recurrent a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_antibiotics_taken")).containsText("Have you/the participant received one or more antibiotics in the past 3 months?");
        page.locator("#s2id_sp_formfield_fa_antibiotics_taken a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_antibiotics_recieved_label")).containsText("Please select the \"Add\" button below to fill in the antibiotics received. Indicate if length of time is in days, weeks, months or years.");
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("Antibiotics");
        assertThat(page.getByLabel("Add a row for Antibiotics")).containsText("Add");
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("AddRemove All");
        assertThat(page.getByLabel("Add a row for Antibiotics")).isVisible();
        assertThat(page.locator("#fa_antibiotics_mrvs").getByText("AddRemove All")).isVisible();
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("Actions");
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("Name of antibiotic");
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("Length of time antibiotic was taken");
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("Length of time In");
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("No data to display");
        page.getByLabel("Add a row for Antibiotics").click();
        assertThat(page.locator("#fa_name")).containsText("Name of antibiotic");
        page.getByLabel("Name of antibiotic").click();
        page.getByLabel("Name of antibiotic").fill("Test Antibiotics");
        page.getByLabel("Name of antibiotic").press("Enter");
        assertThat(page.locator("#fa_length_of_time_taken")).containsText("Length of time antibiotic was taken");
        page.locator("#s2id_sp_formfield_fa_length_of_time_taken a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("105"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("100")).click();
        assertThat(page.locator("#fa_length_of_time_in")).containsText("Length of time In");
        assertThat(page.getByLabel("Antibiotics", new Page.GetByLabelOptions().setExact(true)).locator("sp-help-tag")).containsText("Please specify whether the time entered above is in days, weeks, or months.");
        page.locator("#s2id_sp_formfield_fa_length_of_time_in a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days")).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Cancel"))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add"))).isVisible();
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("Test Antibiotics");
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("100");
        assertThat(page.locator("#fa_antibiotics_mrvs")).containsText("Days");
        assertThat(page.locator("#fa_transfusion_rbc_received")).containsText("Have you/the participant ever received a red blood cell (RBC) transfusion?");
        page.locator("#s2id_sp_formfield_fa_transfusion_rbc_received a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_transfusion_platelet_received")).containsText("Have you/the participant ever received a platelet transfusion?");
        page.locator("#s2id_sp_formfield_fa_transfusion_platelet_received a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_transfusions_received_label")).containsText("Please select the \"Add\" button to fill in the transfusions you/the participant have received.");
        assertThat(page.locator("#fa_transfusions_received_label")).containsText("Add only one row per transfusion type (red blood cell and/or platelets) that you/the participant have received. You do not need to enter every individual transfusion");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Transfusion");
        assertThat(page.getByLabel("Add a row for Transfusion")).containsText("Add");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("AddRemove All");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Actions");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Type of Transfusion");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Age at most recent transfusion");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Month of most recent transfusion date");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Year of most recent transfusion date");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Approximately how many times have you/the participant received this type of transfusion?");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("No data to display");
        page.getByLabel("Add a row for Transfusion").click();
        assertThat(page.locator("#fa_transfusion_type")).containsText("Type of Transfusion");
        page.locator("#s2id_sp_formfield_fa_transfusion_type a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Red Cells (PRBCs)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Platelets"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Red Cells (PRBCs)")).click();
        assertThat(page.locator("#report_date_or_age")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#report_date_or_age")).containsText("Select Unkown/Unsure if you don't know the date or age of your transfusion.");
        page.locator("#s2id_sp_formfield_report_date_or_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date")).click();
        assertThat(page.locator("#month_of_transfusion_date")).containsText("Month of most recent transfusion date");
        page.locator("#s2id_sp_formfield_month_of_transfusion_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("January"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("February"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("March"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("April"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("May"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("June"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("July"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("August"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("September"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("October"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("November"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("December"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("December")).click();
        assertThat(page.locator("#year_of_transfusion_date")).containsText("Year of most recent transfusion date");
        page.locator("#s2id_sp_formfield_year_of_transfusion_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1900"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1901"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2023"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2024"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1996")).click();
        assertThat(page.locator("#fa_number_of_times")).containsText("Approximately how many times have you/the participant received this type of transfusion?");
        page.locator("#s2id_sp_formfield_fa_number_of_times a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("104"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("105"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("104")).click();
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Cancel"))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add"))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Red Cells (PRBCs)");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("Date");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("December");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("1996");
        assertThat(page.locator("#fa_transfusion_mrvs")).containsText("104");
        assertThat(page.locator("#fa_bmf_treatment_recieved")).containsText("Have you/the participant ever received medical treatment for bone marrow failure?");
        assertThat(page.locator("#fa_bmf_treatment_recieved")).containsText("ex. Androgen, Growth factors (G-CSF), Erythropoietin (Epo, Procrit), Eltrombopag (Promacta), Metformin, Quercetin, etc.");
        page.locator("#s2id_sp_formfield_fa_bmf_treatment_recieved a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_bmf_medications_label")).containsText("Please select the \"Add\" button to fill in the medication(s) you/the participant received.");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Bone Marrow Failure Medication");
        assertThat(page.getByLabel("Add a row for Bone Marrow")).containsText("Add");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("AddRemove All");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Actions");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Bone Marrow Medication");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Androgen Name(s):");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Other medication (please specify)");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#id-question-814088191b810250344042e2b24bcb88")).containsText("Age medication was started");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Month of medication start date");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Year of medication start date");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Did the blood counts improve?");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Length of time medication was taken");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Length of time in");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Reason for stopping (if medication stopped)");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("No data to display");
        page.getByLabel("Add a row for Bone Marrow").click();
        assertThat(page.locator("#bmf_blood_bone_marrow_condition")).containsText("Bone Marrow Medication");
        page.locator("#s2id_sp_formfield_bmf_blood_bone_marrow_condition a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Androgen (Specify name or"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Eltrombopag (Promacta)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Erythropoietin (Epo, Procrit)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Growth factors (G-CSF)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Metformin"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other medication (please"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Quercetin"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Androgen (Specify name or")).click();
        assertThat(page.locator("#fa_androgen_names")).containsText("Androgen Name(s):");
        page.getByLabel("Androgen Name(s):").click();
        page.getByLabel("Androgen Name(s):").fill("Androgen Names Test");
        page.getByLabel("Androgen Name(s):").press("Enter");
        assertThat(page.locator("#bmf_report_date_or_age_medication")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#bmf_report_date_or_age_medication")).containsText("Select Unknown/Unsure if you don't know the date or age of Bone Marrow Failure Medication");
        page.locator("#s2id_sp_formfield_bmf_report_date_or_age_medication a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date")).click();
        assertThat(page.locator("#bmf_month_medication_started")).containsText("Month of medication start date");
        page.locator("#s2id_sp_formfield_bmf_month_medication_started a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("January"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("February"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("March"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("November"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("December"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("January")).click();
        assertThat(page.locator("#bmf_year_medication_started")).containsText("Year of medication start date");
        page.locator("#s2id_sp_formfield_bmf_year_medication_started a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1900"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2023"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2024"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1922")).click();
        assertThat(page.locator("#bmf_blood_count_improved")).containsText("Did the blood counts improve?");
        page.locator("#s2id_sp_formfield_bmf_blood_count_improved a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#bmf_length_of_time_taken")).containsText("Length of time medication was taken");
        page.locator("#s2id_sp_formfield_bmf_length_of_time_taken a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("102"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("103"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("104"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("100")).click();
        assertThat(page.locator("#bmf_length_of_time_in")).containsText("Length of time in");
        page.locator("#s2id_sp_formfield_bmf_length_of_time_in a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Years"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days")).click();
        assertThat(page.locator("#bmf_reason_for_stopping_if_medication_stopped")).containsText("Reason for stopping (if medication stopped)");
        page.getByLabel("Reason for stopping (if").click();
        page.getByLabel("Reason for stopping (if").fill("Test is the Reason for stopping\n\n");
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Androgen (Specify name or names if more than one androgen)");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Androgen Names Test");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Date");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("January");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("1922");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Yes");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("100");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Days");
        assertThat(page.locator("#fa_bone_marrow_failure_medication_mrvs")).containsText("Test is the Reason for stopping");
        assertThat(page.locator("#fa_transplant_received")).containsText("Have you/the participant ever received a bone marrow, peripheral blood stem cell or cord blood transplant?");
        page.locator("#s2id_sp_formfield_fa_transplant_received a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_transplants_label")).containsText("Please select the \"Add\" button below to fill in every bone marrow, stem cell, or cord blood transplant you/the participant have received.");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Transplant");
        assertThat(page.getByLabel("Add a row for Transplant")).containsText("Add");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("AddRemove All");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Actions");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Transplant type");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Please select date or age for reporting");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Age of transplant");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Month of transplant date");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Year of transplant date");
        assertThat(page.locator("#id-question-b77114251b094250344042e2b24bcb2a")).containsText("Who was the donor for your/the participant's transplant?");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Other relative (please specify)");
        assertThat(page.locator("#id-question-771250651b094250344042e2b24bcbf9")).containsText("At which center did you/the participant have the transplant?");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("What was the HLA Match?");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("No data to display");
        page.getByLabel("Add a row for Transplant").click();
        assertThat(page.locator("#transplant_type")).containsText("Transplant type");
        page.locator("#s2id_sp_formfield_transplant_type a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bone Marrow Transplant"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cord Blood Transplant"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Peripheral Blood Stem Cell"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bone Marrow Transplant")).click();
        assertThat(page.locator("#report_date_or_age_transplant")).containsText("Please select date or age for reporting");
        assertThat(page.locator("#report_date_or_age_transplant")).containsText("Select Unknown/Unsure if you don't know the date or age of the transplant.");
        page.locator("#s2id_sp_formfield_report_date_or_age_transplant a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date")).click();
        assertThat(page.locator("#month_of_transplant")).containsText("Month of transplant date");
        page.locator("#s2id_sp_formfield_month_of_transplant a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("January"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("February"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("December"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("November")).click();
        assertThat(page.locator("#year_of_transplant")).containsText("Year of transplant date");
        page.locator("#s2id_sp_formfield_year_of_transplant a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1900"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2023"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2024"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2019")).click();
        assertThat(page.locator("#who_was_the_donor_for_your_transplant")).containsText("Who was the donor for your/the participant's transplant?");
        page.locator("#s2id_sp_formfield_who_was_the_donor_for_your_transplant a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Brother"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Father"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Mother"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other relative (please"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Sister"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Brother")).click();
        assertThat(page.locator("#transplant_center")).containsText("At which center did you/the participant have the transplant?");
        assertThat(page.locator("#transplant_center")).containsText("Please provide the Name, City, State/Province, Country of the center.");
        page.getByLabel("At which center did you/the participant have the transplant?", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("At which center did you/the participant have the transplant?", new Page.GetByLabelOptions().setExact(true)).fill("Test Center\n");
        assertThat(page.locator("#hla_match_type")).containsText("What was the HLA Match?");
        page.locator("#s2id_sp_formfield_hla_match_type a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Full Match"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Partial Match"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Haplo"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Full Match")).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Cancel"))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add"))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Bone Marrow Transplant");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Date");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("November");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("2019");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Brother");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Test Center");
        assertThat(page.locator("#fa_transplant_mrvs")).containsText("Full Match");
        assertThat(page.locator("#fa_transplant_chemo_agent")).containsText("Chemotherapy agents used for stem cell transplant (specify agents if known).");
        page.getByLabel("Chemotherapy agents used for").click();
        page.getByLabel("Chemotherapy agents used for").fill("Test Chemotherapy agents ");
        page.getByLabel("Chemotherapy agents used for").press("Enter");
        assertThat(page.locator("#fa_transplant_radiation_received")).containsText("Did you/the participant receive radiation for stem cell transplant?");
        page.locator("#s2id_sp_formfield_fa_transplant_radiation_received a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_gvhd_acute_developed")).containsText("Did you/the participant develop ACUTE Graft versus Host Disease (GvHD)?");
        page.locator("#s2id_sp_formfield_fa_gvhd_acute_developed a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_gvhd_chronic_developed")).containsText("Did you/the participant develop CHRONIC Graft versus Host Disease (GvHD)?");
        page.locator("#s2id_sp_formfield_fa_gvhd_chronic_developed a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_gvhd_treatment")).containsText("Treatment for GVHD (please specify agents)");
        assertThat(page.locator("#fa_gvhd_treatment")).containsText("If you're not sure, please type \"Unknown/Unsure\" in the text box");
        page.getByLabel("Treatment for GVHD (please specify agents)", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Treatment for GVHD (please specify agents)", new Page.GetByLabelOptions().setExact(true)).fill("Test");
        page.getByLabel("Treatment for GVHD (please specify agents)", new Page.GetByLabelOptions().setExact(true)).press("Enter");
        page.locator("div").filter(new Locator.FilterOptions().setHasText(Pattern.compile("^Are you\\/the participant still receiving treatment for GvHD\\?$"))).click();
        assertThat(page.locator("#fa_gvhd_treatment_length")).containsText("What is the length of time you/the participant received GvHD treatment?");
        page.locator("#s2id_sp_formfield_fa_gvhd_treatment_length a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("101")).click();
        assertThat(page.locator("#fa_gvhd_treatment_length_in")).containsText("GvHD Treatment Length In");
        page.locator("#s2id_sp_formfield_fa_gvhd_treatment_length_in a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Years"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days")).click();
        assertThat(page.locator("#fa_gvhd_treatment_ongoing")).containsText("Are you/the participant still receiving treatment for GvHD?");
        page.locator("#s2id_sp_formfield_fa_gvhd_treatment_ongoing a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_gene_therapy_fa_received")).containsText("Have you/the participant received gene therapy (gene corrected cells) for Fanconi anemia?");
        page.locator("#s2id_sp_formfield_fa_gene_therapy_fa_received a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_gene_therapy_detail_label")).containsText("Please select the \"Add\" button below to fill in the gene therapies you/the participant received.");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Gene Therapy Details");
        assertThat(page.getByLabel("Add a row for Gene Therapy")).isVisible();
        assertThat(page.locator("#fa_gene_therapy_details_mrvs").getByText("AddRemove All")).isVisible();
        assertThat(page.getByLabel("Add a row for Gene Therapy")).isVisible();
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Actions");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Procedure Type");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Age at therapy");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Month of therapy date");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Year of therapy date");
        assertThat(page.locator("#id-question-a52178ed1b894250344042e2b24bcbfc")).containsText("At which center did you/the participant receive gene therapy?");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("No data to display");
        page.getByLabel("Add a row for Gene Therapy").click();
        assertThat(page.getByLabel("Read only - Procedure Type")).containsText("Procedure Type");
        page.locator("a").filter(new Locator.FilterOptions().setHasText("Gene Therapy")).click();
        page.locator("a").filter(new Locator.FilterOptions().setHasText("Gene Therapy")).click();
        assertThat(page.locator("a").filter(new Locator.FilterOptions().setHasText("Gene Therapy"))).isVisible();
        assertThat(page.locator("#gene_therapy_report_date_or_age")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#gene_therapy_report_date_or_age")).containsText("Select Unknown/Unsure if you don't know the date or age of Gene Therapy");
        assertThat(page.locator("#gene_therapy_report_date_or_age")).containsText("Select Unknown/Unsure if you don't know the date or age of Gene Therapy");
        page.locator("#s2id_sp_formfield_gene_therapy_report_date_or_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date")).click();
        assertThat(page.locator("#gene_therapy_month_date")).containsText("Month of therapy date");
        page.locator("#s2id_sp_formfield_gene_therapy_month_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("January"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("December"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("July")).click();
        assertThat(page.locator("#gene_therapy_year_date")).containsText("Year of therapy date");
        page.locator("#s2id_sp_formfield_gene_therapy_year_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1900"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2024"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1954")).click();
        assertThat(page.locator("#gene_therapy_location")).containsText("At which center did you/the participant receive gene therapy?");
        assertThat(page.locator("#gene_therapy_location")).containsText("Please provide the Name, City, State/Province, Country of the center");
        page.getByLabel("At which center did you/the participant receive gene therapy?", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("At which center did you/the participant receive gene therapy?", new Page.GetByLabelOptions().setExact(true)).fill("Test Center location Address");
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Gene Therapy");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Date");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("July");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("1954");
        assertThat(page.locator("#fa_gene_therapy_details_mrvs")).containsText("Test Center location Address");
        assertThat(page.locator("#fa_oral_dental_history_header")).containsText("This section of the questionnaire asks about your/the participant's oral and dental history.");
        assertThat(page.locator("#fa_dental_care_received")).containsText("Do you/the participant receive regular dental care?");
        page.locator("#s2id_sp_formfield_fa_dental_care_received a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_dental_care_frequency")).containsText("On average, what is the length of time between your/the participant's regular dental visits?");
        page.locator("#s2id_sp_formfield_fa_dental_care_frequency a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("20"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("20")).click();
        assertThat(page.locator("#fa_dental_care_frequency_in")).containsText("Regular Dental Care Frequency In");
        page.locator("#s2id_sp_formfield_fa_dental_care_frequency_in a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Years"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks")).click();
        assertThat(page.locator("#fa_last_dental_visit_label")).containsText("When did you/the participant last visit a dentist? Please select the \"Add\" button below to fill in the details.");
        assertThat(page.locator("#fa_dental_visit_details")).containsText("Dental Visit Details");
        assertThat(page.getByLabel("Add a row for Dental Visit")).isVisible();
        assertThat(page.locator("#fa_dental_visit_details").getByText("AddRemove All")).isVisible();
        assertThat(page.locator("#fa_dental_visit_details")).containsText("Actions");
        assertThat(page.locator("#fa_dental_visit_details")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_dental_visit_details")).containsText("Age at last dentist visit");
        assertThat(page.locator("#fa_dental_visit_details")).containsText("Month of last dentist visit");
        assertThat(page.locator("#fa_dental_visit_details")).containsText("Year of last dentist visit");
        assertThat(page.locator("#fa_dental_visit_details")).containsText("No data to display");
        page.getByLabel("Add a row for Dental Visit").click();
        assertThat(page.locator("#dentist_report_date_or_age")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#dentist_report_date_or_age")).containsText("Select Unknown/Unsure if you don't know the date or age of Dental visit");
        page.locator("#s2id_sp_formfield_dentist_report_date_or_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date")).click();
        assertThat(page.locator("#dentist_month_date")).containsText("Month of last dentist visit");
        page.locator("#s2id_sp_formfield_dentist_month_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("January"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("December"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("April")).click();
        assertThat(page.locator("#dentist_year_date")).containsText("Year of last dentist visit");
        page.locator("#s2id_sp_formfield_dentist_year_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1900"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2024"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1985")).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Cancel"))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add"))).isVisible();
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_dental_visit_details")).containsText("Date");
        assertThat(page.locator("#fa_dental_visit_details")).containsText("April");
        assertThat(page.locator("#fa_dental_visit_details")).containsText("1985");
        assertThat(page.locator("#fa_reason_for_last_dental_visit")).containsText("What was the main reason for your/the participant's last dental visit?");
        page.locator("#s2id_sp_formfield_fa_reason_for_last_dental_visit a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cleaning"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Oral cancer screening"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cleaning")).click();
        assertThat(page.locator("#fa_periodontal_or_gum_disease")).containsText("Do you/the participant have periodontal or gum disease?");
        page.locator("#s2id_sp_formfield_fa_periodontal_or_gum_disease a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_dental_hygiene_rating")).containsText("Overall how would you/the participant rate your/the participant's hygiene routine?");
        assertThat(page.locator("#fa_dental_hygiene_rating")).containsText("This includes regular tooth brushing, flossing, and your/the participant's home oral mouth rinse");
        page.locator("#s2id_sp_formfield_fa_dental_hygiene_rating a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Excellent"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Very Good"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Good").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Fair"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Poor"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Excellent")).click();
        assertThat(page.locator("#fa_had_orthodontic_treatment")).containsText("Have you/the participant had orthodontic treatment?");
        page.locator("#s2id_sp_formfield_fa_had_orthodontic_treatment a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_had_palatal_expansion")).containsText("Did you/the participant have palatal expansion?");
        page.locator("#s2id_sp_formfield_fa_had_palatal_expansion a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_had_any_mouth_sores")).containsText("Have you/the participant had any mouth sores?");
        page.locator("#s2id_sp_formfield_fa_had_any_mouth_sores a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_had_oral_lesion")).containsText("Have you/the participant ever had visible oral lesion (white or red spots also called leukoplakia or erythroplakia) that did not go away in 3-4 weeks?");
        page.locator("#s2id_sp_formfield_fa_had_oral_lesion a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_oral_lesion_label")).containsText("When did the visible oral lesion (white or red patches) first appear in your/the participant's mouth?");
        assertThat(page.locator("#fa_first_oral_lesion_date_age")).containsText("Please select date or age for reporting.");
        page.locator("#s2id_sp_formfield_fa_first_oral_lesion_date_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_oral_legion_visible_age")).containsText("Age at visible oral lesion");
        assertThat(page.locator("#fa_oral_legion_visible_age")).containsText("If under 1 year of age, please select 0.");
        page.locator("#s2id_sp_formfield_fa_oral_legion_visible_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("101")).click();
        assertThat(page.locator("#fa_ent_consulted_for_oral_lesion")).containsText("Have you/the participant consulted a dentist/oral surgeon or Ear Nose Throat (ENT) doctor for those lesions?");
        page.locator("#s2id_sp_formfield_fa_ent_consulted_for_oral_lesion a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_biopsy_performed_for_oral_lesion")).containsText("Was a biopsy performed?");
        page.locator("#s2id_sp_formfield_fa_biopsy_performed_for_oral_lesion a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_oral_lesion_diagnosis")).containsText("What was the diagnosis?");
        page.locator("#s2id_sp_formfield_fa_oral_lesion_diagnosis a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Leukoplakia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Erythroplakia").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Leukoerythroplakia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bacterial Infection"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Viral Infection"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Fungal (yeast) infection"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Inflammation"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Graft vs Host disease"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Dysplasia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bacterial Infection")).click();
        assertThat(page.locator("#fa_most_recent_oral_lesion_label")).containsText("When did the most recent visible oral lesion (white or red patches) appear in your/the participant's mouth?");
        assertThat(page.locator("#fa_most_recent_oral_lesion_date_age")).containsText("Please select date or age for reporting.");
        page.locator("#s2id_sp_formfield_fa_most_recent_oral_lesion_date_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_most_recent_oral_lesion_age")).containsText("Age");
        assertThat(page.locator("#fa_most_recent_oral_lesion_age")).containsText("If under 1 year of age, please select 0.");
        page.locator("#s2id_sp_formfield_fa_most_recent_oral_lesion_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("90")).click();
        assertThat(page.locator("#fa_oral_lesion_sites")).containsText("What is/are the site/s of lesions in your/the participant's mouth? Please select all that apply.");
        page.locator("#s2id_autogen41").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Dorsal tongue"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Floor of the mouth"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hard palate"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Left cheek"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Left tongue border"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Lower gum"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Right cheek"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Right tonge border"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Upper gum"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hard palate")).click();
        assertThat(page.locator("#fa_oral_lesion_had_brush_biopsy")).containsText("Have you/the participant had a brush biopsy?");
        page.locator("#s2id_sp_formfield_fa_oral_lesion_had_brush_biopsy a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Don't know"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_oral_lesion_treatment_received")).containsText("Did you/the participant receive treatment for the oral lesion(s)?");
        page.locator("#s2id_sp_formfield_fa_oral_lesion_treatment_received a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_oral_lesion_treatment_type")).containsText("What treatment did you/the participant receive for the oral lesion(s)?");
        page.getByLabel("What treatment did you/the").click();
        page.getByLabel("What treatment did you/the").fill("Test Treatment");
        page.getByLabel("What treatment did you/the").press("Enter");
        assertThat(page.locator("#fa_gastrointestinal_history_header")).containsText("Gastrointestinal (GI) History");
        assertThat(page.locator("#fa_g_or_gj_tube_used")).containsText("Have you/the participant had a gastrostomy/G-tube or gastrostomy-jejunostomy/GJ-tube to help with feeding?");
        page.locator("#s2id_sp_formfield_fa_g_or_gj_tube_used a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_g_or_gj_tube_used")).containsText("Have you/the participant had a gastrostomy/G-tube or gastrostomy-jejunostomy/GJ-tube to help with feeding?");
        page.locator("#s2id_sp_formfield_fa_g_or_gj_tube_used a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_g_or_gj_tube_current")).containsText("Do you/the participant currently have a G-tube or G-J tube for feeding?");
        page.locator("#s2id_sp_formfield_fa_g_or_gj_tube_current a").click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_please_complete_the_table_for_gi_symptoms")).containsText("Please select the \"Add\" button below to fill in past or current experience with the following GI Symptoms.");
        assertThat(page.getByText("Symptoms of interest: choking")).isVisible();
        assertThat(page.locator("#fa_please_complete_the_table_for_gi_symptoms")).containsText("Symptoms of interest: choking; gagging; difficulty swallowing; painful swallowing; food getting stuck with swallowing; reflux; heartburn.");
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("GI Symptom");
        assertThat(page.getByLabel("Add a row for GI Symptom")).isVisible();
        assertThat(page.locator("#fa_gi_symptom_mrvs").getByText("AddRemove All")).isVisible();
        assertThat(page.locator("#id-actions-cd97cd791bcd8250344042e2b24bcbff")).containsText("Actions");
        assertThat(page.locator("#id-question-6119093d1bcd8250344042e2b24bcbeb")).containsText("GI Symptom Experienced");
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("Are you/the participant currently experiencing this symptom?");
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("Length of time you/the participant has experienced this symptom");
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("Time in");
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("No data to display");
        page.getByLabel("Add a row for GI Symptom").click();
        assertThat(page.locator("#fa_gi_symptoms")).containsText("GI Symptom Experienced");
        page.locator("#s2id_sp_formfield_fa_gi_symptoms a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Choking, gagging"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Difficulty swallowing"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Painful swallowing"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Food getting stuck with"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Reflux, heartburn"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Choking, gagging")).click();
        assertThat(page.locator("#fa_experience_current")).containsText("Are you/the participant currently experiencing this symptom?");
        page.locator("#s2id_sp_formfield_fa_experience_current a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("span").filter(new Locator.FilterOptions().setHasText(Pattern.compile("^Length of time you\\/the participant has experienced this symptom$")))).isVisible();
        assertThat(page.locator("#fa_experience_length")).containsText("Length of time you/the participant has experienced this symptom");
        page.locator("#s2id_sp_formfield_fa_experience_length a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("87")).click();
        assertThat(page.locator("#fa_experience_length_in")).containsText("Time in");
        page.locator("#s2id_sp_formfield_fa_experience_length_in a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Years"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days")).click();
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("Choking, gagging");
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("Yes");
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("87");
        assertThat(page.locator("#fa_gi_symptom_mrvs")).containsText("Days");
        assertThat(page.locator("#fa_taking_reflux_heartburn_medication")).containsText("Are you/the participant taking reflux/heartburn medication(s)?");
        page.locator("#s2id_sp_formfield_fa_taking_reflux_heartburn_medication a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_heartburn_reflux_medications")).containsText("Please specify the medication(s) and the age you/the participant began taking them:");
        page.getByLabel("Please specify the medication").click();
        page.getByLabel("Please specify the medication").fill("Test medication\n");
        assertThat(page.locator("#fa_ever_seen_gi_specialist")).containsText("Have you/the participant ever seen a GI specialist?");
        page.locator("#s2id_sp_formfield_fa_ever_seen_gi_specialist a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_ever_had_gi_procedures")).containsText("Have you/the participant ever had any GI procedures?");
        assertThat(page.locator("#fa_endocrine_disorder_diagnosed")).containsText("ex. Hypothyroidism, Growth hormone deficiency, Diabetes Type 1 or Type 2, Low gonadal hormones, Female gonadal hormone insufficiency, Thin bones (osteoporosis or osteopenia), etc.");
        assertThat(page.locator("#fa_ever_had_gi_procedures")).containsText("Have you/the participant ever had any GI procedures?");
        assertThat(page.locator("#fa_ever_had_gi_procedures")).containsText("ex. Colonoscopy, Modified Barium Swallow Study, Upper Endoscopy, etc.");
        page.locator("#s2id_sp_formfield_fa_ever_had_gi_procedures a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_gi_procedures_received_label")).containsText("Please select the \"Add\" button below to fill in the GI procedures you/the participant received.");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("GI Procedure Details");
        assertThat(page.getByLabel("Add a row for GI Procedure")).isVisible();
        assertThat(page.locator("#fa_gi_procedure_details").getByText("AddRemove All")).isVisible();
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Actions");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Procedure");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Other GI Tests (please specify)");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Age at GI procedure");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Month of GI procedure date");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Year of GI procedure date");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Where did you/the participant receive this procedure?");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("What was the reason you/the participant had this procedure?");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("What were the findings of this procedure?");
        page.getByLabel("Add a row for GI Procedure").click();
        assertThat(page.locator("#fa_gi_procedure_name")).containsText("Procedure");
        page.locator("#s2id_sp_formfield_fa_gi_procedure_name a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Upper endoscopy"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Colonoscopy"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Modified Barium Swallow Study"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other GI tests (please"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Upper endoscopy")).click();
        assertThat(page.locator("#fa_gi_procedure_report_date_or_age")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_gi_procedure_report_date_or_age")).containsText("Select Unknown/Unsure if you don't know the date or age of GI Procedure");
        page.locator("#s2id_sp_formfield_fa_gi_procedure_report_date_or_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_age_at_gi_procedure")).containsText("Age at GI procedure");
        assertThat(page.locator("#fa_age_at_gi_procedure")).containsText("If under 1 year of age, please select 0.");
        page.locator("#s2id_sp_formfield_fa_age_at_gi_procedure a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("76")).click();
        assertThat(page.locator("#fa_gi_procedure_facility")).containsText("Where did you/the participant receive this procedure?");
        assertThat(page.locator("#fa_gi_procedure_facility")).containsText("Please provide the Hospital name, City, State/Province, Country");
        page.getByLabel("Where did you/the participant receive this procedure?", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Where did you/the participant receive this procedure?", new Page.GetByLabelOptions().setExact(true)).fill("Test Location\n");
        assertThat(page.locator("#fa_gi_procedure_reason")).containsText("What was the reason you/the participant had this procedure?");
        page.getByLabel("What was the reason you/the").click();
        page.getByLabel("What was the reason you/the").fill("Test reason");
        page.getByLabel("What was the reason you/the").press("Enter");
        assertThat(page.locator("#fa_gi_procedure_findings")).containsText("What were the findings of this procedure?");
        page.getByLabel("What were the findings of").click();
        page.getByLabel("What were the findings of").fill("Test finding\n");
        assertThat(page.locator("#fa_gi_procedure_findings")).containsText("What were the findings of this procedure?");
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Cancel"))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add"))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Upper endoscopy");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Age");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("76");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Test Location");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Test reason");
        assertThat(page.locator("#fa_gi_procedure_details")).containsText("Test finding");
        assertThat(page.locator("#fa_endocrine_disorder_diagnosed")).containsText("Have you/the participant ever been diagnosed with any endocrine disorder(s)?");
        assertThat(page.locator("#fa_endocrine_disorder_diagnosed")).containsText("ex. Hypothyroidism, Growth hormone deficiency, Diabetes Type 1 or Type 2, Low gonadal hormones, Female gonadal hormone insufficiency, Thin bones (osteoporosis or osteopenia), etc.");
        page.locator("#s2id_sp_formfield_fa_endocrine_disorder_diagnosed a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_endocrine_disorders_label")).containsText("Please select the \"Add\" button below to fill in the endocrine disorders you/the participant have been diagnosed with.");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Endocrine Disorder");
        assertThat(page.getByLabel("Add a row for Endocrine")).isVisible();
        assertThat(page.locator("#fa_endocrine_disorder_mrvs").getByText("AddRemove All")).isVisible();
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Actions");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Endocrine Disorder");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Other endocrine disorder (please specify)");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Please select date or age for reporting");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Age at diagnosis");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Month of diagnosis date");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Year of diagnosis date");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Have you/the participant received treatment?");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Treatment received");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("No data to display");
        page.getByLabel("Add a row for Endocrine").click();
        assertThat(page.locator("#fa_endocrine_disorder")).containsText("Endocrine Disorder");
        page.locator("#s2id_sp_formfield_fa_endocrine_disorder a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hypothyroidism (underactive"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Growth hormone deficiency"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Diabetes (Type 1: insulin-"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Diabetes Mellitus (Type 2)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low gonadal hormones"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Female gonadal hormone"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Thin bones (osteoporosis or"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hypothyroidism (underactive")).click();
        assertThat(page.locator("#fa_endocrine_disorder_report_date_or_age")).containsText("Please select date or age for reporting");
        assertThat(page.locator("#fa_endocrine_disorder_report_date_or_age")).containsText("Select Unknown/Unsure if you don't know the date or age at Endocrine Disorder diagnosis.");
        page.locator("#s2id_sp_formfield_fa_endocrine_disorder_report_date_or_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_endocrine_disorder_age_at_diagnosis")).containsText("Age at diagnosis");
        assertThat(page.locator("#fa_endocrine_disorder_age_at_diagnosis")).containsText("If under 1 year of age, please select 0.");
        page.locator("#s2id_sp_formfield_fa_endocrine_disorder_age_at_diagnosis a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("35")).click();
        assertThat(page.locator("#fa_endocrine_disorder_treatment_received")).containsText("Have you/the participant received treatment?");
        page.locator("#s2id_sp_formfield_fa_endocrine_disorder_treatment_received a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        page.locator("#fa_endocrine_disorder_treatment").getByText("Treatment received").click();
        assertThat(page.locator("#fa_endocrine_disorder_treatment")).containsText("Treatment received");
        page.getByLabel("Treatment received").click();
        page.getByLabel("Treatment received").fill("Test treatment received");
        page.getByLabel("Treatment received").press("Enter");
        assertThat(page.locator("#fa_endocrine_disorder_treatment_stop_age_or_date")).containsText("Please select date or age for reporting when treatment stopped");
        assertThat(page.locator("#fa_endocrine_disorder_treatment_stop_age_or_date")).containsText("Select Unknown/Unsure if you don't know the date or age of when treatment stopped");
        page.locator("#s2id_sp_formfield_fa_endocrine_disorder_treatment_stop_age_or_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Still receiving treatment"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Still receiving treatment")).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Cancel"))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add"))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Hypothyroidism (underactive thyroid)");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Age");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("35");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Yes");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Test treatment received");
        assertThat(page.locator("#fa_endocrine_disorder_mrvs")).containsText("Still receiving treatment");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT)).click();
        CommonUtils.sleep(500);
    }

    /** This method allows the submissions and assertions of the Reproductive History section of the Fanconi Survey for scenario1.*/
    public static void reproductiveHistorySectionScenario1() {
        var page = PlaywrightUtils.page;
        assertThat(page.getByLabel("Reproductive History").locator("span")).containsText("Reproductive History");
        page.getByLabel("Reproductive History").click();
        assertThat(page.locator("h2")).containsText("Reproductive History");
        assertThat(page.locator("#fa_reproductive_history_header_1")).containsText("The next series of questions will be important for capturing information on reproductive health and organs (current and past).");
        assertThat(page.locator("#fa_reproductive_history_header_1")).containsText("If you are filling this out for someone else, please respond from the perspective of the participant");
        assertThat(page.locator("#fa_gender_at_birth")).containsText("What sex were you/the participant assigned at birth, on your/the participant's original birth certificate?");
        page.locator("#s2id_sp_formfield_fa_gender_at_birth a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Female"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Male").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Prefer not to answer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Female")).click();
        assertThat(page.locator("#fa_gender_identified")).containsText("What is your/the participant's current gender?");
        page.locator("#s2id_sp_formfield_fa_gender_identified a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Female"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Male").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Non-binary"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Transgender"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("I use a different term ("))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Prefer not to answer"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Female")).click();
        assertThat(page.locator("#fa_non_standard_sex_diagnosed")).containsText("Have you/the participant ever been diagnosed by a medical doctor or other health professional with an intersex condition or a difference of sex development (DSD)?");
        assertThat(page.locator("#fa_non_standard_sex_diagnosed")).containsText("This would include being born with (or developed naturally in puberty) genitals, reproductive organs, or chromosomal patterns that do not fit standard definitions of male or female.");
        page.locator("#s2id_sp_formfield_fa_non_standard_sex_diagnosed a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Prefer not to answer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_puberty_delayed")).containsText("Did you/the participant experience delayed puberty (passing the age when puberty normally occurs without any signs of physical or hormonal puberty)?");
        assertThat(page.locator("#fa_puberty_delayed")).containsText("In females this would be lack of pubic hair by age 14, not getting first period by 16. In males, lack of pubic hair by age 15 years, lack of pubertal voice changes by age 16 years.");
        page.locator("#s2id_sp_formfield_fa_puberty_delayed a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Did not experience any delay"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Mild delay, less than two"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Significant delay, more than"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not applicable, has not"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Did not experience any delay")).click();
        assertThat(page.locator("#fa_undescended_testes_diagnosed")).containsText("Have you/the participant been diagnosed with undescended testes (cryptorchidism)?");
        page.locator("#s2id_sp_formfield_fa_undescended_testes_diagnosed a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not applicable"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_undescended_testes_treatment")).containsText("For biological males, how were you/the participant treated for cryptorchidism?");
        page.locator("#s2id_sp_formfield_fa_undescended_testes_treatment a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hormonal treatment"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Surgical treatment"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Untreated, still present"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not applicable, resolved on"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hormonal treatment")).click();
        assertThat(page.locator("#fa_menstruation_issues")).containsText("Have you/the participant experienced any of the following issues with your period/menstruation?");
        page.locator("#s2id_sp_formfield_fa_menstruation_issues a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Amenorrhea (absence of"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Dysmenorrhea (excessive pain"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Heavy bleeding during period"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Irregular periods"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Menstrual migraine"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No known menstrual period"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Amenorrhea (absence of")).click();
        assertThat(page.locator("#fa_fertility_problems_experienced")).containsText("For participants of reproductive age, have you/the participant experienced fertility problems?");
        page.locator("#s2id_sp_formfield_fa_fertility_problems_experienced a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not applicable"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_fertility_problems")).containsText("What fertility problems have you/the participant experienced?");
        page.locator("#s2id_sp_formfield_fa_fertility_problems a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unable to conceive (or"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Miscarriage (or partner has"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not Applicable"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unable to conceive (or")).click();
        assertThat(page.locator("#fa_pap_smear_ever_had")).containsText("Have you/the participant ever had a Pap smear?");
        page.locator("#s2id_sp_formfield_fa_pap_smear_ever_had a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not Applicable"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_first_pap_smear_age")).containsText("How old were you/the participant when you had your first Pap smear?");
        page.locator("#s2id_sp_formfield_fa_first_pap_smear_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("100")).click();
        assertThat(page.locator("#fa_ever_had_abnormal_pap_smear")).containsText("Have you/the participant ever had an abnormal Pap smear?");
        page.locator("#s2id_sp_formfield_fa_ever_had_abnormal_pap_smear a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not applicable"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_first_abnormal_pap_smear_age")).containsText("How old were you/the participant when you had your first abnormal Pap smear?");
        page.locator("#s2id_sp_formfield_fa_first_abnormal_pap_smear_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("101")).click();
        assertThat(page.locator("#fa_recent_abnormal_pap_smear_diagnosis")).containsText("What was the diagnosis of your/the participant's most recent abnormal Pap smear?");
        page.locator("#s2id_sp_formfield_fa_recent_abnormal_pap_smear_diagnosis a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vaginal infection or"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Genital warts"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cervical pre-cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cancer").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vaginal infection or")).click();
        assertThat(page.locator("#fa_abnormal_pap_smear_treatments")).containsText("What treatment did you/the participant receive for your most recent abnormal Pap smear? Select all that apply");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required What treatment did")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Burning"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cone"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Freezing"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Laser"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("LEEP"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No treatment"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Burning")).click();
        page.locator("ul").filter(new Locator.FilterOptions().setHasText("Burning")).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cone")).click();
        page.getByText("Burning Cone").click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Freezing")).click();
        page.getByText("Burning Cone Freezing").click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Laser")).click();
        page.getByText("Burning Cone Freezing Laser").click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("LEEP")).click();
        assertThat(page.locator("#fa_hpv_tested_with_pap_smear")).containsText("Have you/the participant had HPV testing with Pap smear?");
        page.locator("#s2id_sp_formfield_fa_hpv_tested_with_pap_smear a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_high_risk_hpv_detected")).containsText("Was high-risk HPV detected on testing?");
        page.locator("#s2id_sp_formfield_fa_high_risk_hpv_detected a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_ever_had_colposcopy")).containsText("Have you/the participant ever had a colposcopy procedure?");
        page.locator("#s2id_sp_formfield_fa_ever_had_colposcopy a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_colposcopy_label")).containsText("Please select the \"Add\" button below to provide details about your/the participant's most recent colposcopy procedure");
        assertThat(page.locator("#fa_colposcopy_procedure_details")).containsText("Colposcopy Procedure Details");
        assertThat(page.getByRole(AriaRole.TABLE)).containsText("Actions");
        assertThat(page.locator("#id-question-53a526861bc90650344042e2b24bcbbd")).containsText("Please select date or age for reporting.");
        assertThat(page.getByRole(AriaRole.TABLE)).containsText("Age at last colposcopy");
        assertThat(page.getByRole(AriaRole.TABLE)).containsText("Month of colposcopy");
        assertThat(page.getByRole(AriaRole.TABLE)).containsText("Year of colposcopy");
        assertThat(page.getByRole(AriaRole.TABLE)).containsText("Please provide the name and address of the facility where the procedure was performed.");
        assertThat(page.getByRole(AriaRole.CELL)).containsText("No data to display");
        page.getByLabel("Add a row for Colposcopy").click();
        assertThat(page.locator("#fa_report_date_or_age_colposcopy")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_report_date_or_age_colposcopy")).containsText("Select Unknown/Unsure if you don't know the date or age of last colposcopy.");
        page.locator("#s2id_sp_formfield_fa_report_date_or_age_colposcopy a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_age_last_colposcopy")).containsText("Age at last colposcopy");
        page.locator("#s2id_sp_formfield_fa_age_last_colposcopy a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("102")).click();
        assertThat(page.locator("#fa_colposcopy_facility_details")).containsText("Please provide the name and address of the facility where the procedure was performed.");
        assertThat(page.locator("#fa_colposcopy_facility_details")).containsText("Name of Facility, City, State/Province, Country");
        page.getByLabel("Please provide the name and address of the facility where the procedure was performed.", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Please provide the name and address of the facility where the procedure was performed.", new Page.GetByLabelOptions().setExact(true)).fill("Address of the Facility is TEST");
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add").setExact(true)).click();
        assertThat(page.getByRole(AriaRole.TABLE)).containsText("Age");
        assertThat(page.getByRole(AriaRole.TABLE)).containsText("102");
        assertThat(page.getByRole(AriaRole.TABLE)).containsText("Address of the Facility is TEST");
        assertThat(page.locator("#fa_ever_had_uterine_bleeding")).containsText("Have you/the participant ever experienced uterine bleeding for two weeks or longer?");
        page.locator("#s2id_sp_formfield_fa_ever_had_uterine_bleeding a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not Applicable"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_uterine_bleeding_date_or_age")).containsText("When did you/the participant have this bleeding? Please select date or age for reporting.");
        assertThat(page.locator("#fa_uterine_bleeding_date_or_age")).containsText("Select Unknown/Unsure if you don't know the date or age of bleeding.");
        page.locator("#s2id_sp_formfield_fa_uterine_bleeding_date_or_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date")).click();
        assertThat(page.locator("#uterine_bleeding_month")).containsText("Uterine bleeding month");
        page.locator("#s2id_sp_formfield_uterine_bleeding_month a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("January"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("February"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("March"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("April"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("May"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("June"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("July"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("August"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("September"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("October"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("November"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("December"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("July")).click();
        assertThat(page.locator("#uterine_bleeding_year")).containsText("Uterine bleeding year");
        page.locator("#s2id_sp_formfield_uterine_bleeding_year a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1900"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1901"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2023"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2024"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1955")).click();
        assertThat(page.locator("#fa_uterine_bleeding_treatments")).containsText("How was the bleeding treated? Select all that apply");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required How was the bleeding")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Androgens"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Birth control pill"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("D and C (Dilation and"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Depo Provera"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("IUD"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Lupron"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Androgens")).click();
        assertThat(page.locator("#fa_ever_been_pregnant")).containsText("Have you/the participant ever been pregnant?");
        page.locator("#s2id_sp_formfield_fa_ever_been_pregnant a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_pregnancy_history_mrvs_label")).containsText("Please select the \"Add\" button below to provide details for each pregnancy.");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Pregnancy History Details");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs").getByRole(AriaRole.COLUMNHEADER, new Locator.GetByRoleOptions().setName("Actions"))).isVisible();
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Actions");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Age of start of pregnancy");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Month of start of pregnancy");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Year of start of pregnancy");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("What was the outcome for this fetus/baby?");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Did this pregnancy require In Vitro Fertilization (IVF)");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("What type of delivery did you/the participant have for this pregnancy?");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("How long was this pregnancy?");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Time in");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("No data to display");
        page.getByLabel("Add a row for Pregnancy").click();
        assertThat(page.locator("#fa_report_data_or_age_pregnancy")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_report_data_or_age_pregnancy")).containsText("Select Unknown/Unsure if you don't know the date or age of pregnancy.");
        page.locator("#s2id_sp_formfield_fa_report_data_or_age_pregnancy a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_age_of_pregancy")).containsText("Age of start of pregnancy");
        page.locator("#s2id_sp_formfield_fa_age_of_pregancy a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("103")).click();
        assertThat(page.locator("#fa_pregnancy_outcome")).containsText("What was the outcome for this fetus/baby?");
        assertThat(page.locator("#fa_pregnancy_outcome")).containsText("Miscarriage occurs before 20 weeks. Stillbirth occurs after 20 weeks.");
        page.locator("#s2id_sp_formfield_fa_pregnancy_outcome a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Live birth"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Still birth"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Miscarriage"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Currently pregnant"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Live birth")).click();
        assertThat(page.locator("#fa_ivf_required")).containsText("Did this pregnancy require In Vitro Fertilization (IVF)");
        page.locator("#s2id_sp_formfield_fa_ivf_required a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_delivery_type")).containsText("What type of delivery did you/the participant have for this pregnancy?");
        page.locator("#s2id_sp_formfield_fa_delivery_type a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vaginal with forceps or"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cesarean section"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No delivery"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vaginal with forceps or")).click();
        assertThat(page.locator("#fa_pregnancy_length")).containsText("How long was this pregnancy?");
        page.locator("#s2id_sp_formfield_fa_pregnancy_length a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("42"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("43"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("40")).click();
        assertThat(page.locator("#fa_pregnancy_length_in")).containsText("Time in");
        page.locator("#s2id_sp_formfield_fa_pregnancy_length_in a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks")).click();
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Age");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("103");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Live birth");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Yes");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Vaginal with forceps or suction");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("40");
        assertThat(page.locator("#fa_pregnancy_history_details_mrvs")).containsText("Weeks");
        assertThat(page.locator("#fa_breastfeed_children")).containsText("Did you/the participant breastfeed any of your/the participant's children?");
        page.locator("#s2id_sp_formfield_fa_breastfeed_children a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not applicable"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_breastfeeding_length")).containsText("How long in months did you/the participant breastfeed your children? Please add up the months for all your/the participant's children combined.");
        assertThat(page.locator("#fa_breastfeeding_length")).containsText("For example, if you/the participant breastfed two children, one for 10 months and one for 6 months, enter 16 months.");
        page.locator("#s2id_sp_formfield_fa_breastfeeding_length a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("103")).click();
        assertThat(page.locator("#fa_every_had_hysterectomy")).containsText("Have you/the participant ever had a hysterectomy? (Which is the removal of the uterus or womb.)");
        page.locator("#s2id_sp_formfield_fa_every_had_hysterectomy a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not Applicable"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_hysterectomy_reasons")).containsText("What was the reason for your/the participant's hysterectomy? Select all that apply");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required What was the reason")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bleeding (not vaginal)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cancer prevention/Prophylaxis"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cervical tumor"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Endometriosis"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Ovarian tumor"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Pelvic Inflammatory Disease ("))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Uterine tumor (fibroids)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vaginal tumor"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vulvar tumor"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bleeding (not vaginal)")).click();
        assertThat(page.locator("#fa_hysterectomy_age")).containsText("At what age did you/the participant have a hysterectomy?");
        page.locator("#s2id_sp_formfield_fa_hysterectomy_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("103")).click();
        assertThat(page.locator("#fa_ovary_removed")).containsText("Did you/the participant ever have one or both ovaries removed?");
        page.locator("#s2id_sp_formfield_fa_ovary_removed a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Not applicable"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_ovary_removal_type")).containsText("Were one or both ovaries removed?");
        page.locator("#s2id_sp_formfield_fa_ovary_removal_type a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("One ovary"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Both ovaries"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("One ovary")).click();
        assertThat(page.locator("#fa_ovary_removal_reason")).containsText("Why did you/the participant have one or both of your ovaries removed?");
        page.locator("#s2id_sp_formfield_fa_ovary_removal_reason a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cysts"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Ovarian tumor"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("As part of hysterectomy"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cancer prevention/Prophylaxis"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cysts")).click();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT)).click();
    }

    /** This method allows the submissions and assertions of the Surgical And Other Medical History section of the Fanconi Survey for scenario1*/
    public static void surgicalAndOtherMedicalHistorySectionScenario1() {
        var page = PlaywrightUtils.page;
        assertThat(page.getByLabel("Surgical, Medication, and").locator("span")).containsText("Surgical, Medication, and other Medical History");
        page.getByLabel("Surgical, Medication, and").click();
        assertThat(page.locator("h2")).containsText("Surgical, Medication, and other Medical History");
        assertThat(page.getByLabel("form", new Page.GetByLabelOptions().setExact(true))).containsText("Indicates required");
        assertThat(page.locator("#fa_surgical_medication_header_1")).containsText("The next set of questions will ask about Surgical, Medication, and other Medical history.");
        assertThat(page.locator("#fa_surgical_medication_header_1")).containsText("If you are filling this out for someone else, please respond from the perspective of the participant");
        assertThat(page.locator("#fa_biopsy_not_documented")).containsText("Have you/the participant ever had an operation or biopsy not documented in prior sections?");
        page.locator("#s2id_sp_formfield_fa_biopsy_not_documented a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_biopsy_details")).containsText("Please select the \"Add\" button below to complete each operation or biopsy you/the participant have had.");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Operation or Biopsy Details");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Actions");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Type of Procedure");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Age at procedure");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Month of procedure");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Year of procedure");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("What was the reason for the procedure?");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Please provide the name and address of the facility where the procedure was performed.");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("No data to display");
        page.getByLabel("Add a row for Operation or").click();
        assertThat(page.locator("#fa_type_of_procedure")).containsText("Type of Procedure");
        page.locator("#s2id_sp_formfield_fa_type_of_procedure a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Biopsy"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Operation"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Biopsy")).click();
        assertThat(page.locator("#fa_biopsy_date_or_age")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_biopsy_date_or_age")).containsText("Select Unknown/Unsure if you don't know the date or age of procedure.");
        page.locator("#s2id_sp_formfield_fa_biopsy_date_or_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_biopsy_age")).containsText("Age at procedure");
        assertThat(page.locator("#fa_biopsy_age")).containsText("If under 1 year of age, please select 0.");
        page.locator("#s2id_sp_formfield_fa_biopsy_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("100")).click();
        assertThat(page.locator("#fa_biopsy_reason")).containsText("What was the reason for the procedure?");
        page.getByLabel("What was the reason for the").click();
        page.getByLabel("What was the reason for the").fill("Reason for the procedure is TEST");
        page.getByLabel("What was the reason for the").press("Enter");
        assertThat(page.locator("#fa_biopsy_facility_details")).containsText("Please provide the name and address of the facility where the procedure was performed.");
        assertThat(page.locator("#fa_biopsy_facility_details")).containsText("Name of Facility, City, State/Province, Country");
        page.getByLabel("Please provide the name and address of the facility where the procedure was performed.", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Please provide the name and address of the facility where the procedure was performed.", new Page.GetByLabelOptions().setExact(true)).fill("Procedure performed at facility TEST");
        page.getByLabel("Please provide the name and address of the facility where the procedure was performed.", new Page.GetByLabelOptions().setExact(true)).press("Enter");
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add").setExact(true)).click();
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Biopsy");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Age");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("100");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Reason for the procedure is TEST");
        assertThat(page.locator("#fa_operation_or_biopsy_details")).containsText("Procedure performed at facility TEST");
        assertThat(page.locator("#fa_hospitalized_other")).containsText("Have you/the participant ever been hospitalized for any reason other than for surgery (operation) or childbirth?");
        page.locator("#s2id_sp_formfield_fa_hospitalized_other a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_hospitalization_details")).containsText("Please select the \"Add\" button below to complete each hospitalization detail");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Hospitalization Details");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Actions");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Month of hospitalization");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Year of hospitalization");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Age at hospitalization");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("What was the reason for the hospitalization?");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Please provide the name and address of the facility where you/the participant were hospitalized");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("No data to display");
        page.getByLabel("Add a row for Hospitalization").click();
        assertThat(page.locator("#fa_hospitalization_age_or_date")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_hospitalization_age_or_date")).containsText("Select Unknown/Unsure if you don't know the date or age of hospitalization.");
        page.locator("#s2id_sp_formfield_fa_hospitalization_age_or_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_hospitalization_age")).containsText("Age at hospitalization");
        assertThat(page.locator("#fa_hospitalization_age")).containsText("If under 1 year of age, please select 0.");
        page.locator("#s2id_sp_formfield_fa_hospitalization_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("100")).click();
        assertThat(page.locator("#fa_hospitalization_reason")).containsText("What was the reason for the hospitalization?");
        page.getByLabel("What was the reason for the").click();
        page.getByLabel("What was the reason for the").fill("Reason for the Hospitalization is TEST");
        page.getByLabel("What was the reason for the").press("Enter");
        assertThat(page.locator("#fa_hospitalization_facility")).containsText("Please provide the name and address of the facility where you/the participant were hospitalized");
        assertThat(page.locator("#fa_hospitalization_facility")).containsText("Name of Facility, City, State/Province, Country");
        page.getByLabel("Please provide the name and address of the facility where you/the participant were hospitalized", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Please provide the name and address of the facility where you/the participant were hospitalized", new Page.GetByLabelOptions().setExact(true)).fill("Participant was hospitalized in TEST facility");
        page.getByLabel("Please provide the name and address of the facility where you/the participant were hospitalized", new Page.GetByLabelOptions().setExact(true)).press("Enter");
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add").setExact(true)).click();
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Age");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("100");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Reason for the Hospitalization is TEST");
        assertThat(page.locator("#fa_other_hospitalization")).containsText("Participant was hospitalized in TEST facility");
        assertThat(page.locator("#fa_diagnosed_cancer")).containsText("Have you/the participant ever been diagnosed with cancer?");
        page.locator("#s2id_sp_formfield_fa_diagnosed_cancer a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_cancer_details")).containsText("Please select the \"Add\" button below to complete each cancer diagnosis detail");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Cancer Diagnosis Details");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Actions");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Cancer Type");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Other cancer (please specify)");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Age at diagnosis");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Month of diagnosis");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Year of diagnosis");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Please provide the name and address of the facility where they were diagnosed");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("No data to display");
        page.getByLabel("Add a row for Cancer").click();
        assertThat(page.locator("#fa_cancer_type")).containsText("Cancer Type");
        page.locator("#s2id_sp_formfield_fa_cancer_type a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abdominal cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Anal cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bile duct cancer ("))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bladder cancer").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Bone cancer (osteosarcoma)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Brain cancer").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Brain cancer - Astrocytoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Brain cancer - Gliobastoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Brain cancer - Glioma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Brain cancer - Medulloblastoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Breast cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cervical cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Chordoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Colon or rectal cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Colon polyps (benign)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Endometrial or uterine cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Esophageal cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Gallbladder cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Germ cell cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Giant congenital nevus"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Head and neck cancer").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Head and neck cancer - Mouth"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Head and neck cancer - Throat"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Head and neck cancer - Tongue"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Head and neck cancer - Tonsil"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Kidney cancer").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Kidney cancer - Wilms tumor"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Leukemia").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Leukemia - acute lymphoblastic"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Leukemia - acute myeloid"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Leukemia - Burkitt's leukemia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Leukemia - juvenile"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Lipoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Liver cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Lung cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Lymphoma").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Lymphoma - Hodgkin"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Lymphoma - Non-Hodgkin"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Myelodysplastic syndrome"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Neuroblastoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other cancer, specify"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Ovarian cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Pancreatic cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Parathyroid adenoma (benign)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Parathyroid cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Peritoneal cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Pituitary adenoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Prostate cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Retinoblastoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Sarcoma (soft tissue cancer)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Skin cancer (melanoma)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Skin cancer (non-melanoma,"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Stomach or gastric cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Testicular cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Thymus tumor"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Thyroid cancer").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Thyroid nodules (benign)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Urinary Tract cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vaginal cancer"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vulvar cancer"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abdominal cancer")).click();
        assertThat(page.locator("#fa_cancer_age_or_date")).containsText("Please select date or age for reporting.");
        assertThat(page.locator("#fa_cancer_age_or_date")).containsText("Select Unknown/Unsure if you don't know the date or age of cancer diagnosis.");
        page.locator("#s2id_sp_formfield_fa_cancer_age_or_date a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date")).click();
        assertThat(page.locator("#fa_cancer_month")).containsText("Month of diagnosis");
        page.locator("#s2id_sp_formfield_fa_cancer_month a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("January"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("February"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("June"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("December"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("November")).click();
        assertThat(page.locator("#fa_cancer_year")).containsText("Year of diagnosis");
        page.locator("#s2id_sp_formfield_fa_cancer_year a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1900"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1901"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2024"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1953")).click();
        assertThat(page.locator("#fa_cancer_facility_details")).containsText("Please provide the name and address of the facility where they were diagnosed");
        assertThat(page.locator("#fa_cancer_facility_details")).containsText("Name of Facility, City, State/Province, Country");
        page.getByLabel("Please provide the name and address of the facility where they were diagnosed", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Please provide the name and address of the facility where they were diagnosed", new Page.GetByLabelOptions().setExact(true)).fill("Cancer diagnosed at TEST facility");
        page.getByLabel("Please provide the name and address of the facility where they were diagnosed", new Page.GetByLabelOptions().setExact(true)).press("Enter");
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add").setExact(true)).click();
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Abdominal cancer");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Date");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("November");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("1953");
        assertThat(page.locator("#fa_cancer_diagnosis_details")).containsText("Cancer diagnosed at TEST facility");
        assertThat(page.locator("#fa_vitamins")).containsText("Are you/the participant taking any vitamins, minerals, or other herbal supplements?");
        page.locator("#s2id_sp_formfield_fa_vitamins a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_supplement_details_label")).containsText("Please select the \"Add\" button below to fill in each supplement you/the participant take");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Vitamins, Minerals, or Other Herbal Supplements");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Actions");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Name of Supplement");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("How long in total did you/the participant take this supplement?");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Time in");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("When did you/the participant stop taking this supplement? Please select date or age for reporting.");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Age");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Month");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Year");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("No data to display");
        page.getByLabel("Add a row for Vitamins,").click();
        assertThat(page.locator("#fa_supplement_name")).containsText("Name of Supplement");
        assertThat(page.locator("#fa_supplement_name")).containsText("Generic or brand name is OK");
        page.getByLabel("Name of Supplement", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Name of Supplement", new Page.GetByLabelOptions().setExact(true)).fill("SUpplement TEST");
        page.getByLabel("Name of Supplement", new Page.GetByLabelOptions().setExact(true)).press("Enter");
        assertThat(page.locator("#fa_supplement_how_long")).containsText("How long in total did you/the participant take this supplement?");
        assertThat(page.locator("#fa_supplement_how_long")).containsText("For example, if you took the supplement for 6 months, stopped for several months, then took it again for 4 months, report 10 months.");
        page.locator("#s2id_sp_formfield_fa_supplement_how_long a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("101")).click();
        assertThat(page.locator("#fa_supplement_time_measurement")).containsText("Time in");
        page.locator("#s2id_sp_formfield_fa_supplement_time_measurement a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Years"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days")).click();
        assertThat(page.locator("#fa_supplement_stopped_taking")).containsText("When did you/the participant stop taking this supplement? Please select date or age for reporting.");
        assertThat(page.locator("#fa_supplement_stopped_taking")).containsText("Select Unknown/Unsure if you don't know the date or age when the vitamins, minerals, or other herbal supplements were stopped.");
        page.locator("#s2id_sp_formfield_fa_supplement_stopped_taking a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Still taking this supplement"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_supplement_stopped_age")).containsText("Age");
        assertThat(page.locator("#fa_supplement_stopped_age")).containsText("If under 1 year of age, please select 0.");
        page.locator("#s2id_sp_formfield_fa_supplement_stopped_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("104"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("103")).click();
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("SUpplement TEST");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("101");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Days");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("Age");
        assertThat(page.locator("#vitamins_minerals_or_other_herbal_supplements")).containsText("103");
        assertThat(page.locator("#fa_other_medication_details_label")).containsText("Please select the \"Add\" button below to complete medications that you/the participant may be taking that were not listed earlier.");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Other Medication Details");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Actions");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Type");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Other medication type (please specify)");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Name of Medication");
        assertThat(page.locator("#fa_other_medication_details")).containsText("How long in total did you/the participant take this medication?");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Time in");
        assertThat(page.locator("#fa_other_medication_details")).containsText("When did you/the participant stop taking this medication? Please select date or age for reporting.");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Age");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Month");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Year");
        assertThat(page.locator("#fa_other_medication_details")).containsText("No data to display");
        page.getByLabel("Add a row for Other").click();
        assertThat(page.locator("#fa_other_medication_type")).containsText("Type");
        page.locator("#s2id_sp_formfield_fa_other_medication_type a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("ATG/ALG (antithymocyte/"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cyclosporin A"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Iron (as prescribed by a"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Mental Health Medication ("))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Pain (aspirin, NSAIDS,"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other medication (please"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("ATG/ALG (antithymocyte/")).click();
        assertThat(page.locator("#fa_other_medication_name")).containsText("Name of Medication");
        assertThat(page.locator("#fa_other_medication_name")).containsText("Generic or brand name is OK");
        page.getByLabel("Name of Medication", new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel("Name of Medication", new Page.GetByLabelOptions().setExact(true)).fill("Generic Brand TEST");
        page.getByLabel("Name of Medication", new Page.GetByLabelOptions().setExact(true)).press("Enter");
        assertThat(page.locator("#fa_other_medication_how_long")).containsText("How long in total did you/the participant take this medication?");
        assertThat(page.locator("#fa_other_medication_how_long")).containsText("For example, if you took the medication for 6 months, stopped for several months, then took it again for 4 months, report 10 months.");
        page.locator("#s2id_sp_formfield_fa_other_medication_how_long a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("102")).click();
        assertThat(page.locator("#fa_other_medication_time_measurement")).containsText("Time in");
        page.locator("#s2id_sp_formfield_fa_other_medication_time_measurement a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Weeks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Months"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Years"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Days")).click();
        assertThat(page.locator("#fa_other_medication_stopped_taking")).containsText("When did you/the participant stop taking this medication? Please select date or age for reporting.");
        assertThat(page.locator("#fa_other_medication_stopped_taking")).containsText("Select Unknown/Unsure if you don't know the date or age when medication was stopped");
        page.locator("#s2id_sp_formfield_fa_other_medication_stopped_taking a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Still taking this medication"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fa_other_medication_age")).containsText("Age");
        assertThat(page.locator("#fa_other_medication_age")).containsText("If under 1 year old, please select 0.");
        page.locator("#s2id_sp_formfield_fa_other_medication_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("103")).click();
        assertThat(page.locator("#mrvs_active_row")).containsText("Cancel");
        assertThat(page.locator("#mrvs_save_button")).containsText("Add");
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Add")).click();
        assertThat(page.locator("#fa_other_medication_details")).containsText("ATG/ALG (antithymocyte/antilymphocyte globulin)");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Generic Brand TEST");
        assertThat(page.locator("#fa_other_medication_details")).containsText("102");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Days");
        assertThat(page.locator("#fa_other_medication_details")).containsText("Age");
        assertThat(page.locator("#fa_other_medication_details")).containsText("103");
        assertThat(page.locator("#fa_conditions_label")).containsText("For the following sections, select the condition(s) you/the participant have or have had. Please specify right or left side when asked, or fill in the number. If you are unsure, select Unknown/Unsure.");
        assertThat(page.locator("#fa_conditions_skin")).containsText("Skin (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Skin (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Dark spots (Cafe-au-lait"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Dry, rectangular scales on"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hyperpigmented or unusually"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other moles or birthmarks"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Dark spots (Cafe-au-lait")).click();
        assertThat(page.locator("#fa_conditions_skin_dark_spot_count")).containsText("Indicate number of Dark Spots (Cafe-au-lait spots):");
        page.locator("#s2id_sp_formfield_fa_conditions_skin_dark_spot_count a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("-- None --"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("-5"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("-10"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("-20"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("More than"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("-5")).click();
        assertThat(page.locator("#fa_conditions_hfm")).containsText("Head, face, mouth (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Head, face, mouth (")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cleft lip"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cleft palate"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("High arched palate"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Large head (Macrocephaly)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small head (Microcephaly)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small jaw (Micrognathia)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cleft lip")).click();
        assertThat(page.locator("#fa_conditions_teethgums")).containsText("Teeth and gums (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Teeth and gums (")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Early loss of permanent teeth"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Excessive dental cavities"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small teeth (Hypoplastic)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Early loss of permanent teeth")).click();
        assertThat(page.locator("#fa_conditions_ears")).containsText("Ears (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Ears (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal shape - Left ear"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal shape - Right ear"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Canals narrow - Right ear"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Canals narrow - Right ear"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Decreased hearing or hearing loss - Left ear"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Decreased hearing or hearing loss - Right ear"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Frequent ear infections - Left ear (more than 6 in lifetime)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Frequent ear infections - Right ear (more than 6 in lifetime)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low set - Left ear"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Low set - Right ear"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal shape - Left ear")).click();
        assertThat(page.locator("#fa_conditions_eyes")).containsText("Eyes (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Eyes (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cataracts (acquired)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cataracts, congenital"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Droopy eyelids (Ptosis)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Eyes that cross (Strabismus)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Glaucoma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Inner eye fold (Epicanthal"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small eyes (Microphthalmia)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Wears contact lenses ("))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Wears glasses (Describe"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cataracts (acquired)")).click();
        assertThat(page.locator("#fa_conditions_nose")).containsText("Nose (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Nose (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Flat nasal bridge"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Frequent nose bleeds (more"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Flat nasal bridge")).click();
        assertThat(page.locator("#fa_conditions_neck")).containsText("Neck (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Neck (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Congenital elevation of the"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Fused neck bones (Klippel-"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Short"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Webbed"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Congenital elevation of the")).click();
        assertThat(page.locator("#fa_conditions_thumbs")).containsText("Thumbs (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Thumbs (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Displaced (Subluxed) - Left"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Displaced (Subluxed) - Right"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Extra thumb - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Extra thumb - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Finger-like (Triphalangeal) - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Finger-like (Triphalangeal) - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Flat of thumb (Flat thenar muscle) - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Flat of thumb (Flat thenar muscle) - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small (Hypoplastic) - Left"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small (Hypoplastic) - Right"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Split (Duplicated or Bifid) - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Split (Duplicated or Bifid) - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent - Left hand")).click();
        assertThat(page.locator("#fa_conditions_fingers")).containsText("Fingers (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Fingers (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Extra finger - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Extra finger - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Missing finger - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Missing finger - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Short, curved 5th finger \"pinkie\" (Clinodactyly) - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Short, curved 5th finger \"pinkie\" (Clinodactyly) - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Surgery to correct thumb or hand deformity - Left hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Surgery to correct thumb or hand deformity - Right hand"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Extra finger - Left hand")).click();
        assertThat(page.locator("#fa_conditions_forearm_lower_arm")).containsText("Arms - Radii and Ulnae (Lower arm bones) (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Arms - Radii and")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent or weak radial pulse"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent Radius (inner forearm"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent ulna (outer forearm"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Short radius"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Short ulna"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent or weak radial pulse")).click();
        assertThat(page.locator("#fa_conditions_forearm_upper_arm")).containsText("Arms - Humeri (Upper arm bones) (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Arms - Humeri (Upper")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent humerus"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Short humerus"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent humerus")).click();
        assertThat(page.locator("#fa_conditions_heartlungs")).containsText("Heart and lungs (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Heart and lungs (")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Asthma"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Atrial septal defect"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Coarctation of the aorta"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other Congenital heart"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other lung condition (please"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Patent ductus arteriosus (PDA)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Tetralogy of Fallot"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Ventricular septal defect"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Asthma")).click();
        assertThat(page.locator("#fa_conditions_genitalia_male")).containsText("Genitalia - Male (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Genitalia - Male (")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal placement of opening"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Inguinal hernia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small penis"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small testes (Hypogonadism)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal placement of opening")).click();
        assertThat(page.locator("#fa_conditions_genitalia_female")).containsText("Genitalia - Female (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Genitalia - Female (")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal ovaries (Indicate"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal uterus"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal vagina"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal ovaries (Indicate")).click();
        assertThat(page.locator("#fa_survey_which_ovary")).containsText("Abnormal Ovaries: Which ovary is abnormal?");
        page.locator("#s2id_sp_formfield_fa_survey_which_ovary a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Left"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Right"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Both"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Left")).click();
        assertThat(page.locator("#fa_conditions_kidneys")).containsText("Kidneys (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Kidneys (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Decreased function"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Duplicated ureters (the tubes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Horseshoe (Fused)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Infections (fill in the"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Metabolic acidosis"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Single (only one kidney"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Underdeveloped (Dysplastic)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Decreased function")).click();
        assertThat(page.locator("#fa_conditions_gastrointestinal")).containsText("Gastrointestinal (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Gastrointestinal (")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent spleen"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Duodenal atresia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hole between trachea and"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Imperforate anus"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Jejunal atresia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Liver function abnormal"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Narrowed esophagus ("))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Small stomach"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Umbilical hernia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent spleen")).click();
        assertThat(page.locator("#fa_conditions_lower_limbs")).containsText("Lower limbs (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Lower limbs (Select")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal knees - Left leg"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal knees - Right leg"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Club feet - Left foot"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Club feet - Right foot"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Congenital dislocated hips - Left hip"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Congenital dislocated hips - Right hip"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Poor separation of 2 toes - webbed toes (Toe syndactyly) - Left foot"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Poor separation of 2 toes - webbed toes (Toe syndactyly) - Right foot"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Abnormal knees - Left leg")).click();
        assertThat(page.locator("#fa_conditions_skeletal")).containsText("Skeletal (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Skeletal (Select all")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Kyphoscoliosis"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Kyphosis"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Missing ribs"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other (please specify)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Scoliosis").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Spina bifida"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Vertebral abnormalities"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Kyphoscoliosis")).click();
        assertThat(page.locator("#fa_diagnosed_vater")).containsText("Have you/the participant been diagnosed with VATER syndrome or VACTERL association?");
        page.locator("#s2id_sp_formfield_fa_diagnosed_vater a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_neurological_health")).containsText("Neurological Abnormality & Mental Health (Select all that apply):");
        page.getByRole(AriaRole.COMBOBOX, new Page.GetByRoleOptions().setName("Required Neurological")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent or underdeveloped"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Aqueduct stenosis"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Cerebellar hypoplasia"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Decreased reflexes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Hydrocephalus"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Increased reflexes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Neurological Disorder ("))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("None"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other mental health condition"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Other neurological"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Pituitary stalk interruption"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Poor balance (Ataxia)"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Seizures"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Absent or underdeveloped")).click();
        assertThat(page.locator("#fa_diagnosed_with_fa_neurological_syndrome")).containsText("Have you/the participant ever been diagnosed with Fanconi Anemia Neurological Syndrome (FANS)");
        page.locator("#s2id_sp_formfield_fa_diagnosed_with_fa_neurological_syndrome a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_fans_report_date_or_age")).containsText("Please select date or age for reporting when you/the participant were diagnosed with FANS.");
        assertThat(page.locator("#fa_fans_report_date_or_age")).containsText("Select Unknown/Unsure if you don't know the date or age of FANS diagnosis");
        page.locator("#s2id_sp_formfield_fa_fans_report_date_or_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Date"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Age")).click();
        assertThat(page.locator("#fans_diagnosis_age")).containsText("FANS Diagnosis Age");
        page.locator("#s2id_sp_formfield_fans_diagnosis_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("2").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("106"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("102")).click();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT)).click();
        CommonUtils.sleep(500);
    }

    /** This method allows the submissions and assertions of the Background Information section of the Fanconi Survey for scenario1.*/
    public static void backgroundInformationSectionScenario1() {
        var page = PlaywrightUtils.page;
        assertThat(page.getByLabel(FanconiSurveyPage.BACKGROUND_INFORMATION)).hasText(FanconiSurveyPage.BACKGROUND_INFORMATION);
        assertThat(page.getByLabel(FanconiSurveyPage.BACKGROUND_INFORMATION)).isEnabled();
        page.getByLabel(FanconiSurveyPage.BACKGROUND_INFORMATION).click();
        CommonUtils.sleep(2000);
        assertThat(page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(FanconiSurveyPage.HOME))).isVisible();
        assertThat(page.getByLabel(FanconiSurveyPage.PAGE_BREADCRUMBS).getByRole(AriaRole.LIST)).containsText(FanconiSurveyPage.BACKGROUND_INFORMATION);
        assertThat(page.locator(FanconiSurveyPage.H_2)).hasText(FanconiSurveyPage.BACKGROUND_INFORMATION);
        assertThat(page.getByLabel(FanconiSurveyPage.FORM, new Page.GetByLabelOptions().setExact(true))).containsText(FanconiSurveyPage.INDICATES_REQUIRED);
        assertThat(page.getByText(FanconiSurveyPage.THIS_FIRST_SECTION)).hasText(FanconiSurveyPage.THIS_FIRST_SECTION);
        assertThat(page.getByText(FanconiSurveyPage.PLEASE_RESPOND_FROM_THE_PERSPECTIVE_OF_THE_PARTICIPANT)).hasText(FanconiSurveyPage.PLEASE_RESPOND_FROM_THE_PERSPECTIVE_OF_THE_PARTICIPANT);
        assertThat(page.getByLabel(FanconiSurveyPage.FORM, new Page.GetByLabelOptions().setExact(true)).getByText(FanconiSurveyPage.TO_CONFIRM_ARE_YOU_COMPLETING_THIS_FORM_FOR_YOURSELF_OR_FOR_SOMEONE_ELSE, new Locator.GetByTextOptions().setExact(true))).hasText(FanconiSurveyPage.TO_CONFIRM_ARE_YOU_COMPLETING_THIS_FORM_FOR_YOURSELF_OR_FOR_SOMEONE_ELSE);
        assertThat(page.getByText(FanconiSurveyPage.I_AM_COMPLETING_THIS_FORM_FOR_SOMEONE_ELSE)).hasText(FanconiSurveyPage.I_AM_COMPLETING_THIS_FORM_FOR_SOMEONE_ELSE);
        assertThat(page.getByText(FanconiSurveyPage.I_AM_COMPLETING_THIS_FORM_FOR_MYSELF)).hasText(FanconiSurveyPage.I_AM_COMPLETING_THIS_FORM_FOR_MYSELF);
        page.getByText(FanconiSurveyPage.I_AM_COMPLETING_THIS_FORM_FOR_SOMEONE_ELSE).click();
        assertThat(page.getByText(FanconiSurveyPage.PROXY_ENTER_YOUR_NAME)).hasText(FanconiSurveyPage.PROXY_ENTER_YOUR_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_PROXY_FIRST_NAME)).hasText(FanconiSurveyPage.FIRST_NAME);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_PROXY_FIRST_NAME).fill(FanconiSurveyPage.PROXY_FIRST_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_PROXY_MIDDLE_INITIAL)).hasText(FanconiSurveyPage.MIDDLE_INITIAL);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_PROXY_MIDDLE_INITIAL).fill(FanconiSurveyPage.PROXY_MIDDLE_INITIAL);
        assertThat(page.locator(FanconiSurveyPage.FA_PROXY_LAST_NAME).getByText(FanconiSurveyPage.LAST_NAME)).hasText(FanconiSurveyPage.LAST_NAME);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_PROXY_LAST_NAME).fill(FanconiSurveyPage.PROXY_LAST_NAME);
        assertThat(page.getByText(FanconiSurveyPage.WHAT_IS_YOUR_THE_PARTICIPANT_S_NAME)).hasText(FanconiSurveyPage.WHAT_IS_YOUR_THE_PARTICIPANT_S_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_FIRST_NAME)).hasText(FanconiSurveyPage.FIRST_NAME);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_FIRST_NAME).fill(FanconiSurveyPage.PARTICIPANT_FIRST_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_LAST_NAME)).hasText(FanconiSurveyPage.LAST_NAME);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_LAST_NAME).fill(FanconiSurveyPage.PARTICIPANT_LAST_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_MIDDLE_INITIAL)).hasText(FanconiSurveyPage.MIDDLE_INITIAL);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_MIDDLE_INITIAL).fill(FanconiSurveyPage.PARTICIPANT_MIDDLE_INITIAL);
        assertThat(page.getByText(FanconiSurveyPage.WHO_IS_YOUR_THE_PARTICIPANT_PHYSICIAN)).hasText(FanconiSurveyPage.WHO_IS_YOUR_THE_PARTICIPANT_PHYSICIAN);
        assertThat(page.getByText(FanconiSurveyPage.PHYSICIAN_CONTACT_DETAIL)).isVisible();
        assertThat(page.locator(FanconiSurveyPage.FA_TREATING_PHYSICIAN)).containsText(FanconiSurveyPage.PHYSICIAN_DETAILS);
        assertThat(page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_PHYSICIAN)).hasText(FanconiSurveyPage.ADD);
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ACTIONS))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.NAME_OF_PHYSICIAN_FIRST_NAME_AND_LAST_NAME))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.INSTITUTION_HOSPITAL_NAME))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.INSTITUTION_HOSPITAL_LOCATION_CITY_STATE_PROVINCE_COUNTRY_ZIP_CODE))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.INSTITUTION_HOSPITAL_NAME))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.INSTITUTION_HOSPITAL_LOCATION))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.TELEPHONE))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FAX_NUMBER))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.EMAIL_ADDRESS))).isVisible();
        assertThat(page.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName("No data to display"))).isVisible();
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_PHYSICIAN).click();
        assertThat(page.locator(FanconiSurveyPage.FA_NAME_OF_PHYSICIAN)).hasText(FanconiSurveyPage.NAME_OF_PHYSICIAN_FIRST_NAME_AND_LAST_NAME);
        page.getByLabel(FanconiSurveyPage.NAME_OF_PHYSICIAN_FIRST_NAME).click();
        page.getByLabel(FanconiSurveyPage.NAME_OF_PHYSICIAN_FIRST_NAME).fill(FanconiSurveyPage.PHYSICIAN_FIRST_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_TREATMENT_FACILITY)).hasText(FanconiSurveyPage.INSTITUTION_HOSPITAL_NAME);
        page.getByLabel(FanconiSurveyPage.INSTITUTION_HOSPITAL_NAME).click();
        page.getByLabel(FanconiSurveyPage.INSTITUTION_HOSPITAL_NAME).fill(FanconiSurveyPage.INSTITUTION_NAME);
        assertThat(page.locator(FanconiSurveyPage.FA_TREATMENT_FACILITY_LOCATION)).hasText(FanconiSurveyPage.INSTITUTION_HOSPITAL_LOCATION_CITY_STATE_PROVINCE_COUNTRY_ZIP_CODE);
        page.getByLabel(FanconiSurveyPage.INSTITUTION_HOSPITAL_LOCATION).click();
        page.getByLabel(FanconiSurveyPage.INSTITUTION_HOSPITAL_LOCATION).fill(FanconiSurveyPage.INSTITUTION_LOCATION);
        assertThat(page.locator(FanconiSurveyPage.FA_PHYSICIAN_TELEPHONE)).hasText(FanconiSurveyPage.TELEPHONE);
        page.getByLabel(FanconiSurveyPage.TELEPHONE).click();
        page.getByLabel(FanconiSurveyPage.TELEPHONE).fill(FanconiSurveyPage.ADD_TELEPHONE_NUMBER);
        assertThat(page.locator(FanconiSurveyPage.FA_PHYSICIAN_FAX_NUMBER)).hasText(FanconiSurveyPage.FAX_NUMBER);
        page.getByLabel(FanconiSurveyPage.FAX_NUMBER).click();
        page.getByLabel(FanconiSurveyPage.FAX_NUMBER).fill(FanconiSurveyPage.ADD_FAX_NUMBER);
        assertThat(page.locator(FanconiSurveyPage.FA_PHYSICIAN_EMAIL_ADDRESS)).hasText(FanconiSurveyPage.EMAIL_ADDRESS);
        page.getByLabel(FanconiSurveyPage.EMAIL_ADDRESS).click();
        page.getByLabel(FanconiSurveyPage.EMAIL_ADDRESS).fill(FanconiSurveyPage.ADD_EMAIL_ADDRESS);
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CANCEL))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName(FanconiSurveyPage.PHYSICIAN_FIRST_NAME))).isVisible();
        assertThat(page.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName(FanconiSurveyPage.INSTITUTION_NAME))).isVisible();
        assertThat(page.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName(FanconiSurveyPage.INSTITUTION_LOCATION))).isVisible();
        assertThat(page.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD_TELEPHONE_NUMBER))).isVisible();
        assertThat(page.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD_FAX_NUMBER))).isVisible();
        assertThat(page.getByRole(AriaRole.CELL, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD_EMAIL_ADDRESS))).isVisible();
        assertThat(page.locator(FanconiSurveyPage.NUM_AFFECTED_FAMILY_MEMBER)).containsText(FanconiSurveyPage.NUM_AFFECTED_FAMILY_MEMBER_DETAIL);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_NUM_AFFECTED_FAMILY_MEMBER_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true)).click();
        assertThat(page.getByText(FanconiSurveyPage.AFFECTED_FAMILY_MEMBER_DETAIL_NOTE)).isVisible();
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVES_DETAILS)).containsText(FanconiSurveyPage.FAMILY_MEMBERS);
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FAMILY_MEMBER))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.OTHER_RELATIVE_PLEASE_SPECIFY))).isVisible();
        page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CURRENT_VITAL_STATUS)).click();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CURRENT_AGE_OR_AGE_AT_DEATH))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.HAVE_THEY_RECEIVED_A_HEMATOPOIETIC_STEM_CELL_TRANSPLANT))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.DO_THEY_HAVE_A_HISTORY_OF_CANCER))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.IF_YES_SPECIFY_CANCER_TYPE_SITE))).isVisible();
        assertThat(page.getByRole(AriaRole.COLUMNHEADER, new Page.GetByRoleOptions().setName(FanconiSurveyPage.OTHER_CANCER_TYPE_SITE_PLEASE_SPECIFY))).isVisible();
        page.getByLabel(FanconiSurveyPage.ADD_A_ROW_FOR_FAMILY_MEMBERS).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVE_RELATION)).containsText(FanconiSurveyPage.FAMILY_MEMBER);
        assertThat(page.getByLabel(FanconiSurveyPage.FAMILY_MEMBERS, new Page.GetByLabelOptions().setExact(true)).locator(FanconiSurveyPage.SP_HELP_TAG)).hasText(FanconiSurveyPage.IF_YOU_DO_NOT_KNOW_PLEASE_SELECT_UNKNOWN_UNSURE);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AFFECTED_RELATIVE_RELATION_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.OTHER_RELATIVE_PLEASE)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_OTHER_RELATIVE_PLEASE_SPECIFY)).hasText(FanconiSurveyPage.OTHER_RELATIVE_PLEASE_SPECIFY);
        page.getByLabel(FanconiSurveyPage.OTHER_RELATIVE_PLEASE_SPECIFY, new Page.GetByLabelOptions().setExact(true)).click();
        page.getByLabel(FanconiSurveyPage.OTHER_RELATIVE_PLEASE_SPECIFY, new Page.GetByLabelOptions().setExact(true)).fill(FanconiSurveyPage.OTHER_RELATIVE_PLEASE_SPECIFY_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVE_VITAL_STATUS)).containsText(FanconiSurveyPage.CURRENT_VITAL_STATUS);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AFFECTED_RELATIVE_VITAL_STATUS_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ALIVE)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVE_CURRENT_AGE_OR_AGE_AT_DEATH)).containsText(FanconiSurveyPage.CURRENT_AGE_OR_AGE_AT_DEATH);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AFFECTED_RELATIVE_CURRENT_AGE_OR_AGE_AT_DEATH_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.AGE_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVE_STEM_CELL_TRANSPLANT)).containsText(FanconiSurveyPage.HAVE_THEY_RECEIVED_A_HEMATOPOIETIC_STEM_CELL_TRANSPLANT);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AFFECTED_RELATIVE_STEM_CELL_TRANSPLANT_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVE_CANCER)).containsText(FanconiSurveyPage.DO_THEY_HAVE_A_HISTORY_OF_CANCER);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AFFECTED_RELATIVE_CANCER_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVE_CANCER)).containsText(FanconiSurveyPage.DO_THEY_HAVE_A_HISTORY_OF_CANCER);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AFFECTED_RELATIVE_CANCER_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVE_CANCER_DETAILS)).containsText(FanconiSurveyPage.IF_YES_SPECIFY_CANCER_TYPE_SITE);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_AFFECTED_RELATIVE_CANCER_DETAILS_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CANCER_ENTERED)).click();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.CANCEL))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.ADD)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVES_DETAILS)).containsText(FanconiSurveyPage.OTHER_RELATIVE_PLEASE_SPECIFY);
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVES_DETAILS)).containsText(FanconiSurveyPage.OTHER_RELATIVE_PLEASE_SPECIFY_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVES_DETAILS)).containsText(FanconiSurveyPage.ALIVE);
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVES_DETAILS)).containsText(FanconiSurveyPage.AGE_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVES_DETAILS)).containsText(FanconiSurveyPage.YES);
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVES_DETAILS)).containsText(FanconiSurveyPage.YES);
        assertThat(page.locator(FanconiSurveyPage.FA_AFFECTED_RELATIVES_DETAILS)).containsText(FanconiSurveyPage.CANCER_ENTERED);
        assertThat(page.locator(FanconiSurveyPage.FA_FAMILY_CAMP)).containsText(FanconiSurveyPage.FA_FAMILY_CAMP_DETAIL);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_FAMILY_CAMP_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_FAMILY_CAMP_COUNT)).containsText(FanconiSurveyPage.FA_FAMILY_CAMP_COUNT_DETAILS);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_FAMILY_CAMP_COUNT_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.FA_FAMILY_CAMP_COUNT_ENTERED).setExact(true)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_INCLUDED_IN_PUBLICATION)).containsText(FanconiSurveyPage.FA_INCLUDED_IN_PUBLICATION_DETAILS);
        page.locator(FanconiSurveyPage.SP_FORMFIELD_FA_INCLUDED_IN_PUBLICATION_A).click();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName(FanconiSurveyPage.YES)).click();
        assertThat(page.locator(FanconiSurveyPage.FA_PUBLICATION)).containsText(FanconiSurveyPage.FA_PUBLICATION_DETAILS);
        page.getByLabel(FanconiSurveyPage.PLEASE_PROVIDE_ANY_ADDITIONAL).click();
        page.getByLabel(FanconiSurveyPage.PLEASE_PROVIDE_ANY_ADDITIONAL).fill(FanconiSurveyPage.PLEASE_PROVIDE_ANY_ADDITIONAL_DETAILS);
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT)).click();
        CommonUtils.sleep(500);
    }

    /** This method allows the submissions and assertions of the Sexual History section of the Fanconi Survey for scenario1.*/
    public static void sexualHistorySectionScenario1() {
        var page = PlaywrightUtils.page;
        assertThat(page.locator("tbody")).containsText("Sexual History");
        page.getByLabel("Sexual History").click();
        assertThat(page.locator("h2")).containsText("Sexual History");
        assertThat(page.getByLabel("form", new Page.GetByLabelOptions().setExact(true))).containsText("Indicates required");
        assertThat(page.locator("#fa_sexual_history_header_1")).containsText("The next set of questions will ask about Sexual History.");
        assertThat(page.locator("#fa_sexual_history_header_1")).containsText("SOMETIMES ADOLESCENTS OR TEENAGERS FEEL MORE COMFORTABLE ANSWERING QUESTIONS ON SEXUAL ISSUES IN PRIVATE. IF YOU ARE COMPLETING THIS QUESTIONNAIRE FOR A TEENAGER, YOU MAY CONSIDER ALLOWING YOUR TEENAGER TO FILL OUT THE FOLLOWING SECTIONS ON THEIR OWN.");
        assertThat(page.locator("#fa_sexual_history_header_1")).containsText("If you are filling this out for someone else, please respond from the perspective of the participant");
        assertThat(page.locator("#fa_sexual_history_intercourse")).containsText("Have you/the participant ever had sexual intercourse?");
        page.locator("#s2id_sp_formfield_fa_sexual_history_intercourse a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("No").setExact(true))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Yes")).click();
        assertThat(page.locator("#fa_sexual_history_age")).containsText("How old were you/the participant when you/the participant first had sexual intercourse?");
        page.locator("#s2id_sp_formfield_fa_sexual_history_age a").click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("0").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("1").setExact(true))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("105"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("31")).click();
        assertThat(page.locator("#fa_sexual_history_partner_count")).containsText("Throughout your/the participant's life, with how many different partners have you/the participant had sexual intercourse?");
        page.locator("a").filter(new Locator.FilterOptions().setHasText("-- None --")).click();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("to 2"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("to 5"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("to 9"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("or more"))).isVisible();
        assertThat(page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("Unknown/Unsure"))).isVisible();
        page.getByRole(AriaRole.OPTION, new Page.GetByRoleOptions().setName("to 2")).click();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(FanconiSurveyPage.SUBMIT)).click();
        CommonUtils.sleep(500);
    }

    /** This method allows the submissions of the Fanconi Survey.*/
    public static void  submitFanconiSurvey(){
        var page = PlaywrightUtils.page;
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Submit Fanconi Questionnaire"))).isVisible();
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Submit Fanconi Questionnaire")).click();
        assertThat(page.getByRole(AriaRole.DIALOG)).containsText("Thank you for completing the Fanconi Anemia Survey! If there are any other health issues present that have not been captured by this survey, please list them here");
        page.locator("#textArea1").click();
        page.locator("#textArea1").fill("Fanconi SUrvey COmpleted");
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Cancel"))).isVisible();
        assertThat(page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Confirm and submit"))).isVisible();
        page.onceDialog(dialog -> {
            System.out.println(String.format("Dialog message: %s", dialog.message()));
            dialog.dismiss();
        });
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Confirm and submit")).click();
        page.navigate("https://service-test.nci.nih.gov/fanconi");
    }
}
